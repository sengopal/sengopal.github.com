<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://sengopal.github.io/blog/</link>
    <atom:link href="http://sengopal.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
    <description>Java, JVM and Random Thoughts - Senthilkumar Gopal</description>
    <language>en-US</language>
    <pubDate>Sun, 12 Nov 2017 19:33:14 -0800</pubDate>
    <lastBuildDate>Sun, 12 Nov 2017 19:33:14 -0800</lastBuildDate>

    <item>
      <title>Google Sign-In Integration for the eBay Android App</title>
      <link>http://sengopal.github.io/blog//blog/google-sign-in-integration-for-the-ebay-android-app.html</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/google-sign-in-integration-for-the-ebay-android-app.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a technical blog post on how we implemented Google Identity integration was done on eBay Android app and leveraged to help users authenticate seamlessly. - &lt;a href=&quot;http://www.ebaytechblog.com/2017/10/24/google-sign-in-integration-for-the-ebay-android-app/&quot;&gt;Actual post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Good code and Why should we care?</title>
      <link>http://sengopal.github.io/blog//blog/good-code-and-why-should-we-care.html</link>
      <pubDate>Sat, 5 Aug 2017 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/good-code-and-why-should-we-care.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is medium post on how A medium post on how to write good code and why we should care about it - &lt;a href=&quot;https://medium.com/@sengopal/good-code-and-why-should-we-care-d376e1efd775&quot;&gt;Actual post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>My journey with Udacity Android Developer Nanodegree</title>
      <link>http://sengopal.github.io/blog//blog/my-journey-with-udacity-android-developer-nanodegree.html</link>
      <pubDate>Sun, 4 Sep 2016 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/my-journey-with-udacity-android-developer-nanodegree.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is medium post on how I journeyed through my Android Nanodegree program offered by Udacity - &lt;a href=&quot;https://medium.com/@sengopal/my-journey-with-udacity-android-developer-nanodegree-5d24bd9f3dff#.53n2m9sw6&quot;&gt;Actual post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Finite-State Machine for Single-Use Code Authentication</title>
      <link>http://sengopal.github.io/blog//blog/finite-state-machine-for-single-use-code-authentication.html</link>
      <pubDate>Tue, 30 Aug 2016 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/finite-state-machine-for-single-use-code-authentication.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a technical blog post on how we implemented a single use code based authentication by utilizing a finite state machine structure. - &lt;a href=&quot;http://www.ebaytechblog.com/2016/08/30/finite-state-machine-for-single-use-code-authentication&quot;&gt;Actual post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>How to give an awesome presentation</title>
      <link>http://sengopal.github.io/blog//blog/tips-for-giving-an-awesome-presention.html</link>
      <pubDate>Sat, 20 Aug 2016 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/tips-for-giving-an-awesome-presention.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is medium post on few tips in giving a great presentation and engaging your audience. &lt;a href=&quot;https://medium.com/@sengopal/tips-for-giving-an-awesome-presention-9c56c00d5242#.3nqk3m4tj&quot;&gt;Actual post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Application Resiliency Using Netflix Hystrix</title>
      <link>http://sengopal.github.io/blog//blog/application-resiliency-using-netflix-hystrix.html</link>
      <pubDate>Sun, 9 Aug 2015 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/application-resiliency-using-netflix-hystrix.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a technical blog post on why resiliency is required for all web based applications and how it was implemented using Netflix Hystrix. - &lt;a href=&quot;http://www.ebaytechblog.com/2015/09/08/application-resiliency-using-netflix-hystrix&quot;&gt;Actual post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Steps for secure Android Application development</title>
      <link>http://sengopal.github.io/blog//blog/steps-for-secure-android-app-development.html</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/steps-for-secure-android-app-development.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a recent working session, some of the best practices for a secure Android application development were discussed. Following were some of the important aspects of the discussion. Other the usual standards of securing the APK and securing the server-side components, some of the development and secure coding practices are listed in this post. Its the responsibility of every Android app developer to keep themselves appraised about new threats using OWASP Mobile Top 10 Risks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_data_classification_and_handling_standards&quot;&gt;Data classification and Handling Standards&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;All data persisted should be encrypted - sqlliteDB, files, dataprovider etc.,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;#8217;t transmit sensitive data to unapproved 3rd party.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;#8217;t put sensitive data into Intents&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mobile_privacy&quot;&gt;Mobile privacy&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Respect user&amp;#8217;s privacy by collecting minimum amount of data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GPS &amp;amp; location data - fine grain vs. coarse grain GPS data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contact Info&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microphone and Camera use&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tracking and Analytics IDs&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_attack_surface_analysis&quot;&gt;Attack Surface Analysis&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Third party code automatically inherits app permissions. Treat new versions of library as a new version of your app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Google Alerts for any security disclosures regarding the 3rd party library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_securing_logs&quot;&gt;Securing logs&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Do not enable crash logs by default. Get user consent before logging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not store crash logs for too long&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not send plain-text logs over HTTP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mask sensitive user information in the logs - starbucks usecase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minimize the number of permissions - dont ask for what you dont need - Incoming SMS messages -&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_securing_intents&quot;&gt;Securing Intents&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use PendingIntents as delayed callbacks to private Broadcast receivers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Explicit intents as much as possible&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;context.sendBroadcast(intent,&quot;custom-permission&quot;);
context.startActivity(intent);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_permissions_and_intents&quot;&gt;Permissions and Intents&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use custom permission for 3rd party or other apps to subscribe for notifications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For sensitive activities, set FLAG_SECURE constant flag in WindowManager.LayoutParams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perform intent data validation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For private activities, use explicit intent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seperate services in AndroidManifest with explicit and seperate permissions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use explicit intent to call Service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;checkCallingPermission()&lt;/code&gt; to verify if permission is available to the caller&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_data_security&quot;&gt;Data Security&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use record level delegation feature to share a specific record or file without sharing the entire database to provide minimum access.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never trust the parameters passed to content providers. Sanatize for injection attacks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Securing ContentProviders. Always set &lt;code&gt;exported=false&lt;/code&gt; in your &lt;strong&gt;AndroidManifest.xml&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ppecify explicit permissions for reading and writing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use dynamic &lt;code&gt;grantUriPermissions&lt;/code&gt; attribute to true to grant permission for certain portion for certain amount of time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_webview_security&quot;&gt;WebView Security&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Disable JS and Plugin support if not needed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No local file access&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not load 3rd party hosts unless validated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not follow redirect requests in the server response unless validated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If possible, use only https&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable form auto-fill feature by using &lt;code&gt;WebView.WebSettings.setSaveFormData()&lt;/code&gt; as false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reject unexpected content - only allow HTML for main page (reject PDFs etc.,)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secure Page Rendering in WebView  - shouldOverrideUrlLoading&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access Modifiers should not be trusted for sensitivity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear the cache after Webview of a Sensitive page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;onPageFinished(Webview view, String Url){
    view.clearCache(true);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Ensure that UI Redressing (a.k.a) Tap jacking protection is setup to prevent click jacking Use &lt;code&gt;setFilterTouchesWhenObscured(true)&lt;/code&gt; or android:setFilterTouchesWhenObscured for activity declaration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_development_practices&quot;&gt;Development practices&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Keep sensitive data in RAM no longer than required such as Encryption keys, Authn, Authz tokens, passwords.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variables should be nullified after use&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use byte[] and char[] for sensitive data rather than Strings which helps in cleaning easier.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;_internal_storage&quot;&gt;Internal Storage&lt;/h5&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Accessible only to your app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clean the cache using deleteFile()&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;_external_storage&quot;&gt;External Storage&lt;/h5&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Globally readable and writable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can be physically removed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid using this storage for sensitive apps in general. Use &lt;code&gt;preferInternal&lt;/code&gt; to prevent app being installed in external storage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Keychain API for system wide credentials&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Keystore to stores its own credentials&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;file.delete()&lt;/code&gt; does not securely delete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always delete cache files when user logs out&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not keep files with any sensitive data any longer than absolutely needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not create files with MODE_WORLD_READABLE or writeable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use modes such as 0666, 0777, 0663 with chmod binary or syscalls accepting a file modes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only share info using content providers instead of file system&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_cryptography&quot;&gt;Cryptography&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Dont store plain-text secret key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never roll your own CRYPTO libraries. use the approved ones&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never store secrets using string - only char[] and byte[]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never seed SecureRandom&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_camera_feed&quot;&gt;Camera feed&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use default CAmera app/services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or, create SurfaceView to display a Camera Preview and click button to convert to Picture&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_url_connections&quot;&gt;URL Connections&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use TLS instead of SSLv3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use only https&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSLSocket class can be used but with caution. It does not do hostname verification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If overriding, check &lt;code&gt;getDefaultHostNameVerifier()&lt;/code&gt; or &lt;code&gt;HostNameVerifier.verify()&lt;/code&gt; returns boolean true.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Git and Github secrets</title>
      <link>http://sengopal.github.io/blog//blog/git-github-secrets.html</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 -0800</pubDate>
      <guid isPermaLink="false">blog/git-github-secrets.html</guid>
      	<description>
	&lt;p&gt;Git commandline and Github are two of most used tools for a web developer. Especially in a team environment, we use these more than a few times in a day. Recently I came across a screencast held at Aloha Ruby Conference. Some of the important and amazing shortcuts and useful tips discussed were summarized below. Rather than using them all, we should start couple of them and start practising them which definitely improves our tooling and productivity.&lt;/p&gt;
&lt;h3&gt;Github&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Adding .diff or .patch to the URL provides more clearer textual representation&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;    https://github.com/sengopal/sengopal.github.com/commit/c1ed8ca37880bb6b369e5007fa88909aa1b73189
    https://github.com/sengopal/sengopal.github.com/commit/c1ed8ca37880bb6b369e5007fa88909aa1b73189.diff
    https://github.com/sengopal/sengopal.github.com/commit/c1ed8ca37880bb6b369e5007fa88909aa1b73189.patch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Remove Whitespace differences using&lt;/strong&gt; &lt;code&gt;?w=1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cool octocat images @ octodex.github.com&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URL Shortner : git.io&lt;/strong&gt;&lt;br/&gt;Usage: &lt;code&gt;gitio &amp;lt;url&amp;gt; &amp;lt;name?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lexer and Highlighting Languages:&lt;/strong&gt; &lt;a href=&quot;https://github.com/github/linguist&quot; title=&quot;Linguist&quot;&gt;Linguist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gist as Screenshot sharing and discussion tool&lt;/strong&gt; &lt;code&gt;&amp;lt;https://gist.github.com/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git + Hub super commands&lt;/strong&gt;&lt;br/&gt;Hub is a command line tool that wraps git in order to extend it with extra features and commands that make working with GitHub easier.&lt;br/&gt;&lt;a href=&quot;https://github.com/defunkt/hub&quot; title=&quot;hub repo&quot;&gt;hub repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Shortcuts&lt;/strong&gt;&lt;br/&gt;Press in repo page&lt;br/&gt;&lt;code&gt;t&lt;/code&gt; - for File Finder&lt;br/&gt;&lt;code&gt;w&lt;/code&gt; - branch selector&lt;br/&gt;&lt;code&gt;s&lt;/code&gt; - quick search&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:&amp;#95;_&amp;#64;&amp;#x6d;&amp;#x65;&amp;#x6e;&amp;#x74;&amp;#105;&amp;#x6f;&amp;#x6e;_&amp;#95;&quot;&gt;&amp;#95;_&amp;#64;&amp;#x6d;&amp;#x65;&amp;#x6e;&amp;#x74;&amp;#105;&amp;#x6f;&amp;#x6e;_&amp;#95;&lt;/a&gt; - adds person to the conversation&lt;br/&gt;&lt;a href=&quot;mailto:&amp;#x5f;&amp;#95;@&amp;#79;&amp;#114;&amp;#103;a&amp;#110;i&amp;#x7a;&amp;#97;&amp;#x74;&amp;#x69;&amp;#111;&amp;#110;/&amp;#x54;&amp;#x65;a&amp;#109;&amp;#x5f;&amp;#x5f;&quot;&gt;&amp;#x5f;&amp;#95;@&amp;#79;&amp;#114;&amp;#103;a&amp;#110;i&amp;#x7a;&amp;#97;&amp;#x74;&amp;#x69;&amp;#111;&amp;#110;/&amp;#x54;&amp;#x65;a&amp;#109;&amp;#x5f;&amp;#x5f;&lt;/a&gt; - adds the organization/team to the conversation&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#&amp;lt;number&amp;gt;&lt;/code&gt; - &lt;strong&gt;autolinks to issue number&lt;/strong&gt;&lt;br/&gt;Example: using a commit message such as &quot;closes &lt;code&gt;#1291&lt;/code&gt;&quot; autolinks to the issue&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding&lt;/strong&gt; &lt;code&gt;?author=sengopal&lt;/code&gt; &lt;strong&gt;or email address to&lt;/strong&gt; &lt;code&gt;github.com/repo/commits/master&lt;/code&gt; &lt;strong&gt;gives the list of commits by that author.&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;Useful for your resume !&lt;/em&gt;&lt;br/&gt;Example:&lt;br/&gt;&lt;a href=&quot;https://github.scm.corp.ebay.com/Verification/verification-webapp/commits/master?author=sengopal&quot;&gt;https://github.scm.corp.ebay.com/Verification/verification-webapp/commits/master?author=sengopal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pulls needn&apos;t be from a fork, but can be done from branches as well&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Github supports emoji&apos;s which are available under&lt;/strong&gt; &lt;a href=&quot;http://emoji-cheat-sheet.com&quot; title=&quot;Emoji-cheat-sheet&quot;&gt;Emoji-cheat-sheet&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Git line quirks&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git branch --merged&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git branch --no-merged&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git branch --contains &amp;lt;sha&amp;gt;&lt;/code&gt; - which branch has this SHA&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git checkout &amp;lt;branch_name&amp;gt; --&amp;lt;path to file&amp;gt;&lt;/code&gt; - checkout that file from that branch into your current branch&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git log branchA ^branchB&lt;/code&gt; - commits in A not in B&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git fsck ==lost-found&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git diff HEAD^ --stat&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git blame -w&lt;/code&gt; - to avoid whitespace as commits&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git blame -M&lt;/code&gt; - original commit and not the move commit&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git blame -C&lt;/code&gt; - same as M except looks in the same commit&lt;br/&gt;&lt;em&gt;-CC, -CCC are the other variations available&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git status -sb&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git diff HEAD^ --word-diff&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git config --global help.autocorrect 1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git config --global rerere.enabled 1&lt;/code&gt; - long running branches, remembers merge conflicts&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git config --global color.ui 1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git-amend&lt;/code&gt; - alias to &lt;code&gt;git commit --amend -C HEAD&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git undo&lt;/code&gt; - alias to &lt;code&gt;git reset --soft HEAD^&lt;/code&gt; - retains commit as staged&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git-count&lt;/code&gt; - alias to &lt;code&gt;git shortlog -sn&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git add -p&lt;/code&gt; - useful for logical commits&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;code&gt;git show :/&amp;lt;query&amp;gt;&lt;/code&gt; - checks for the message or file name&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Commit Comparison&lt;/strong&gt;&lt;br/&gt;LINE Linking - #L16, #L16-25&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Advanced Compare View&lt;/em&gt;&lt;br/&gt;Range - &lt;code&gt;MASTER@{1.day.ago}...MASTER&lt;/code&gt;&lt;br/&gt;bookmark that page and see whats team upto in last 12 hours&lt;/p&gt;
&lt;h3&gt;Key Git commands in order of importance&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Clone – Creates a repository from a network or local location&lt;/li&gt;
  &lt;li&gt;Status – What is staged, and in the working directory&lt;/li&gt;
  &lt;li&gt;Log – history of commits&lt;/li&gt;
  &lt;li&gt;Add – make a file ready for staging&lt;/li&gt;
  &lt;li&gt;Commit – Move staged files to a commit&lt;/li&gt;
  &lt;li&gt;Reset – Clean an entire working directory&lt;/li&gt;
  &lt;li&gt;Pull – Perform a fetch &amp;amp; merge operation&lt;/li&gt;
  &lt;li&gt;Push – send your changes to the parent repository&lt;/li&gt;
  &lt;li&gt;Branch – to create a new branch&lt;/li&gt;
  &lt;li&gt;Checkout – to grab one or more files&lt;/li&gt;
  &lt;li&gt;Clean – removing files that exist only in the working directory&lt;/li&gt;
  &lt;li&gt;Fetch – Get changes from the parent repository to store within the current repo&lt;/li&gt;
  &lt;li&gt;Merge – Combine two or more commits into one&lt;/li&gt;
&lt;/ul&gt;
	</description>
    </item>
    <item>
      <title>Java Mail Made Easy using Velocity Templates</title>
      <link>http://sengopal.github.io/blog//blog/java-mail-using-velocity-templates.html</link>
      <pubDate>Fri, 1 Oct 2010 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/java-mail-using-velocity-templates.html</guid>
      	<description>
	&lt;h3&gt;Introduction to Velocity&lt;/h3&gt;
&lt;p&gt;Velocity is an open source templating tool developed by an international volunteer community and hosted by the Apache Software Foundation&apos;s Jakarta Project. You can download the freely available source code at the &lt;a href=&quot;http://www.javaworld.com/javaworld/jw-12-2001/jw-1228-velocity.html#resources&quot;&gt;Jakarta Velocity&lt;/a&gt; Project Website.&lt;/p&gt;
&lt;h3&gt;Simple Velocity Template Example&lt;/h3&gt;
&lt;p&gt;Any application using Velocity requires two parts. The first is the template&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Helloworld.vm&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Hello $name!  Welcome to Velocity!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;HelloWorld.java:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import java.io.StringWriter;
  import org.apache.velocity.Template;
  import org.apache.velocity.VelocityContext;
  import org.apache.velocity.app.Velocity;
  public class HelloWorld{
      public static void main( String[] args ) throws Exception {
          /*  Get the Template  */
          Template t = Velocity.getTemplate(&amp;quot;Helloworld.vm&amp;quot; );
          /*  create a context and add data */
          VelocityContext context = new VelocityContext();
          context.put(&amp;quot;name&amp;quot;, &amp;quot;World&amp;quot;);
          /* now render the template into a StringWriter */
          StringWriter writer = new StringWriter();
          t.merge( context, writer );
          /* show the World */
          System.out.println( writer.toString() );
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Hello World!  Welcome to Velocity!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Introduction to JAVA MAIL API&lt;/h3&gt;
&lt;p&gt;The Java Mail API provides the capability to develop email clients and mail-enabled Java applications. It supports the creation of sophisticated user interfaces for mail clients. It includes appropriate convenience classes, which encapsulate common mail functions and protocols. It fits with other packages for the Java platform in order to facilitate its use with other Java APIs. It provides a mail and messaging framework addition to the Java platform.&lt;/p&gt;
&lt;p&gt;Although the Java Mail API contains many more classes than those discussed here, concentrating on some of the core classes to start with makes it easy to understand the essence of the API. The following is a brief description of the core classes:&lt;/p&gt;
&lt;h4&gt;javax.mail.Session&lt;/h4&gt;
&lt;p&gt;The javax.mail.Session class is the top-level entry class for the Java Mail API, and its most commonly used methods provide the ability to control and load the classes that represent the service provider implementations (SPI) for various mail protocols (Note: A service provider is a developer and/or vendor that provides an implementation for an API; examples of Java Mail API implementations include POP3, SMTP, and IMAP4 -- some are available from Sun, others via third parties.)&lt;/p&gt;
&lt;h4&gt;javax.mail.Transport&lt;/h4&gt;
&lt;p&gt;The javax.mail.Transport class is another provider-implemented class and is used for sending a message over a specific protocol.&lt;/p&gt;
&lt;h4&gt;javax.mail.Message&lt;/h4&gt;
&lt;p&gt;The javax.mail.Message class is implemented by a provider and models all the details of an actual e-mail message, such as the subject line, sender/recipient e-mail address, sent date, and so on. The guidelines for providers who implement the javax.mail.Message dictate that the actual fetching of e-mail message components should be delayed as long as possible in order to make this class as lightweight as possible.&lt;/p&gt;
&lt;h4&gt;Simple JAVA Mail Example&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;  import java.beans.*;
  import javax.mail.*;
  import javax.mail.internet.*;
  import java.io.*;
  import java.util.*;
   public class MailBean {
        public MailBean(String from, String userName, String subject, String content){
           try{
              mail(from, userName, subject, content);
           }catch(MessagingException e)  {}
         }
         public String getBenaInfo(){
              return &amp;quot;A Bean that sends mail&amp;quot;;
        }
       public void mail(String from, String userName, String subject, String content)throws MessagingException{
          String smtpHost = &amp;quot;00.00.00.00&amp;quot;;
          //start a session
          java.util.Properties properties = System.getProperties();
          properties.put(&amp;quot;mail.smtp.host&amp;quot;,smtpHost);
          Session session = Session.getInstance(properties,null);

          //Construct a message object
          MimeMessage message = new MimeMessage(session);
          message.setFrom(new InternetAddress(from));
          message.addRecipient(Message.RecipientType.TO,new InternetAddress(userName));
          message.setSubject(subject);
          message.setText(content);
          message.setSentDate(new java.util.Date());

          //connect to transport
          Transport transport = session.getTransport(&amp;quot;smtp&amp;quot;);
          transport.connect(smtpHost,&amp;quot;&amp;quot;, &amp;quot;&amp;quot;);

          //send the message and close the connection
          transport.sendMessage(message,message.getAllRecipients());
          transport.close();
       }
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As there are a lot of tutorials available for Velocity and Java Mail, this tutorial deals only with the integration of Velocity for easier and more customized mailing abilities.&lt;/p&gt;
&lt;h3&gt;Project Usage&lt;/h3&gt;
&lt;p&gt;Our Project required nearly fifty different mail formats to be sent on various stages of the application. The difficult part being that the templates contained loads of dynamic data. Also these templates were being updated on a regular basis making it more difficult for developing the application.&lt;/p&gt;
&lt;p&gt;We used Velocity Templates for storing the design and the layout of the mail which needs to be sent and used them for integrating the dynamic attributes into the layout and hence providing a seamless abstraction between the presentation and the business layer.&lt;/p&gt;
&lt;h2&gt;Step-by-Step Explanation of the Code&lt;/h2&gt;
&lt;h3&gt;SendMessage.java&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Velocity Template Merging&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The best practice for storing the non-variables such as the SMTP connect parameters, the template names etc., either in a properties file or in a constants interface. In this example, a properties file, “mail. properties” has been used. Using the ClassLoader the properties file is loaded&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  Properties props = new Properties();
  props.load(SendMessage.class.getClassLoader().getResourceAsStream(&amp;quot;mail.properties&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Mail.vm template is loaded from into the Velocity context using the static method Velocity.getTemplate&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  Template template = Velocity.getTemplate(&amp;quot;Mail.vm&amp;quot;);
  VelocityContext context = new VelocityContext();
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then the user defined MailBean is placed in the velocity Context under the name “MailBean”&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  context.put(&amp;quot;MailBean&amp;quot; , mailBean);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Along with beans, we can place name value pairs directly in the velocity context&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  String host =  props.getProperty(&amp;quot;hostname&amp;quot;);
  context.put(&amp;quot;host&amp;quot;, host);
  context.put(&amp;quot;imgName&amp;quot;, &amp;quot;smile.gif&amp;quot;);
  context.put(&amp;quot;context&amp;quot;, &amp;quot;myApp&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the context is merged with the template and the results in placed in a StringWriter Object&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  StringWriter message = new StringWriter();
  template.merge(context, message);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;JAVA Mail - E-Mail Creation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The SMTP Host variable is placed in the System Properties and the javax.mail.Session is obtained for the given SMTP Host&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  Properties sysProperties = System.getProperties();
  sysProperties.put(&amp;quot;mail.smtp.host&amp;quot;, props.getProperty(&amp;quot;smtpHost&amp;quot;));
  Session session = Session.getInstance(sysProperties, null);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since the e-mail needs to contain text and an image file, create a MimeMultipart with the subtype declared as “related’ so that the image being put doesnt get lost if the images are blocked by the recipient&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  MimeMultipart multipart = new MimeMultipart(&amp;quot;related&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;For adding the image to the e-mail&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a body part for storing the image and embedding into the e-mail&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  BodyPart imageBodyPart = new MimeBodyPart();
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the FileDataSource to read the image from the Web deployment folder.&lt;br/&gt;Note: &lt;em&gt;Using File.seperator takes care of the Windows/Unix environment issue&lt;/em&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  StringBuffer imgPath = new StringBuffer().append(File.separator).append(&amp;quot;applications&amp;quot;).append(File.separator).append(&amp;quot;mailheader.GIF&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then using the DataHandler object place the image into the BodyPart created&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  DataSource fds = new FileDataSource(imgPath.toString());
  imageBodyPart.setDataHandler(new DataHandler(fds));
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set an id for the image body part so that the image can be accessed anywhere in the mail for embedding&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  imageBodyPart.setHeader(&amp;quot;Content-ID&amp;quot;,&amp;quot;&amp;lt;123&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the Image Body Part into the MimeMultiPart object&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  multipart.addBodyPart(imageBodyPart);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Adding the Message body content to the e-mail&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a body part for storing the message content in the e-mail&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  BodyPart messageBodyPart = new MimeBodyPart();
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Combine the StringWriter Object and the image src code using a StringBuffer&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  StringBuffer messageBuffer = new StringBuffer();
  messageBuffer.append(message.toString());
  messageBuffer.append(&amp;quot;&amp;lt;img src=&amp;quot;cid:123\&amp;quot;&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set the Message content type as &lt;em&gt;text/html&lt;/em&gt;, since our template VM is designed using HTML and add the message body part to the main MultiMime part&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  messageBodyPart.setContent(messageBuffer.toString(), &amp;quot;text/html&amp;quot;);
  multipart.addBodyPart(messageBodyPart);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sending the E-Mail&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a MimeMessage using the javax.mail.Session Object&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  Message msg = new MimeMessage(session);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set the content as the multimime part object created&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  msg.setContent(multipart);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Recipients are added to the e-mail for the recipient types TO, CC and BCC&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  msg.addRecipients(Message.RecipientType.TO, InternetAddress.parse(&amp;quot;someone@example.com&amp;quot;));
  msg.addRecipients(Message.RecipientType.CC,InternetAddress.parse(&amp;quot;everyone@example.com&amp;quot;));
  if((null!=recipientsList)&amp;amp;&amp;amp;(!recipientsList.isEmpty())){
      for(int i=0;i&amp;lt;recipientsList.size();i++){
          msg.addRecipients(Message.RecipientType.BCC,InternetAddress.parse(recipientsList.get(i)));
      }
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Subject Text, Sent Date and the From Address are set as below.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  msg.setSubject(subject);
  msg.setSentDate(new Date());
  msg.setFrom(new InternetAddress(&amp;quot;dummy@example.com&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Transport Object is used for creating the connection to the SMTP host and sending the e-mail. The transporter object below is obtained using the getTransport method and by giving the parameter as &lt;em&gt;smtp&lt;/em&gt; as the protocol for the Transport Object&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  Transport transport = session.getTransport(&amp;quot;smtp&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then the Transport is connected using the HOST, UserName and Password parameters from the properties file&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  transport.connect(props.getProperty(&amp;quot;connectHost&amp;quot;);
  props.getProperty(&amp;quot;connectUser&amp;quot;);
  props.getProperty(&amp;quot;connectPassword&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then the e-mail is sent using the sendMessage to all the recipients&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  transport.sendMessage(msg,msg.getAllRecipients());
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The transport is closed to mark the end of the connection&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;  transport.close();
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Mail.vm&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Image Path Macro&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This macro is used to return the path to be used as SRC by the images in the HTML. It takes a parameter imgName and returns the string,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  https://$host/$context/images/$imgName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where $host, $context are context variables placed by the JAVA code&lt;/p&gt;
&lt;p&gt;The macro looks like this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  #macro( IMGURL $imgName )
      https://$host/$context/images/$imgName
  #end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;img src=&amp;quot;#IMGURL(&amp;#39;mailheader.GIF&amp;#39;)&amp;quot; border=&amp;quot;0&amp;quot; width=&amp;quot;980&amp;quot; height=&amp;quot;61&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will get generated as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;img src=&amp;quot;https://localhost/myapp/images/mailheader.GIF&amp;quot; border=&amp;quot;0&amp;quot; width=&amp;quot;980&amp;quot; height=&amp;quot;61&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Accessing the Bean Object&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The variables in the MailBean object placed in the context can be accessed using, &lt;code&gt;$MailBean.\[variable-name\]&lt;/code&gt;&lt;br/&gt;Example: &lt;code&gt;Mail Content : $MailBean.content&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;mail.properties&lt;/h4&gt;
&lt;p&gt;This file contains the connection and the other context parameter properties used by the java code&lt;/p&gt;
&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;p&gt;Designed as an easy-to-use general templating tool, Velocity is useful in any Java application area that requires data formatting and presentation. Their salient advantages being:&lt;br/&gt;* It adapts to many application areas.&lt;br/&gt;* It offers a simple, clear syntax for the template designer.&lt;br/&gt;* It offers a simple programming model for the developer.&lt;br/&gt;* Because templates and code are separate, you can develop and maintain them independently.&lt;br/&gt;* The Velocity engine easily integrates into any Java application environment, especially Servlets.&lt;br/&gt;* Velocity enables templates to access any public method of data objects in the context.&lt;/p&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://velocity.apache.org/&quot;&gt;http://velocity.apache.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.roseindia.net/software-tutorials/detail/3131&quot;&gt;http://www.roseindia.net/software-tutorials/detail/3131&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/&quot;&gt;http://java.sun.com/developer/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kickjava.com/2876.htm&quot;&gt;http://kickjava.com/2876.htm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.javaworld.com/javaworld/jw-12-2001/jw-1228-velocity.html&quot;&gt;http://www.javaworld.com/javaworld/jw-12-2001/jw-1228-velocity.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html&quot;&gt;http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.javasoft.com/products/javamail&quot;&gt;http://www.javasoft.com/products/javamail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
	</description>
    </item>
    <item>
      <title>PDF Generation using PD4ML</title>
      <link>http://sengopal.github.io/blog//blog/pdf-generation-using-pd4ml.html</link>
      <pubDate>Mon, 5 Apr 2010 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/pdf-generation-using-pd4ml.html</guid>
      	<description>
	&lt;h3&gt;Project Usage&lt;/h3&gt;
&lt;p&gt;Our project required PDF generation at various stages of the application and the uploading the same into the FileNet FTP. PD4ML was used for generation and saving the file locally into the server from which the PDF got generated to the FileNet. PD4ML was used as our application used Struts framework and the data needed in the PDF was provided using STRUTS and the layout design was done using HTML and CSS. This provided us with a seamless abstraction between the presentation and the business layer for dynamic generation of PDFs online.&lt;/p&gt;
&lt;h3&gt;Introduction to PD4ML&lt;/h3&gt;
&lt;p&gt;PD4ML is a powerful PDF generating tool that uses HTML and CSS (Cascading Style Sheets) as page layout and content definition format. Written in 100% pure Java, it allows users to easily add PDF generation functionality to end products. PD4ML can be used either as a command line operation or in Web applications for online PDF generation from HTML and JSP templates.&lt;/p&gt;
&lt;h3&gt;PD4ML as a Command Line Operation&lt;/h3&gt;
&lt;p&gt;PD4ML can be used for HTML to PDF transformation with a command line application. There are man ways for achieving this conversion. However the most commonly used methods are as follows:&lt;/p&gt;
&lt;h4&gt;Creating a PDF from an URL String&lt;/h4&gt;
&lt;p&gt;The PDF can be generated using a html file whose URL can be in the render () method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.zefer.pd4ml.PD4ML;
  import org.zefer.pd4ml.PD4Constants;
  ........

  File f = new File(&amp;quot;D:/tools/test.pdf&amp;quot;);
  java.io.FileOutputStream fos = new java.io.FileOutputStream(f);
  PD4ML pd4ml = new PD4ML();
  pd4ml.render( urlstring, fos );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Steps Involved&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Import the PD4ML converter class&lt;/li&gt;
  &lt;li&gt;Define HTML-to-PDF converting parameter values if needed such as user space width, HTML elements arrangement, vertical size etc.,&lt;/li&gt;
  &lt;li&gt;Preparing output stream for PDF generation.&lt;/li&gt;
  &lt;li&gt;Instantiating PD4ML converter.&lt;/li&gt;
  &lt;li&gt;Passing to it HTML-to-PDF converting parameters.&lt;/li&gt;
  &lt;li&gt;Performing HTML-to-PDF translation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Converting HTML obtained from input stream to PDF&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using an URL for converting an HTML into a PDF is not mandatory. PD4ML can read a source HTML from input stream and then use the input stream for conversion into the PDF&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  File f = new File(&amp;quot;D:/tools/test.pdf&amp;quot;);
  java.io.FileOutputStream fos = new java.io.FileOutputStream(f);
  File fz = new File(&amp;quot;D:/tools/yahoo.htm&amp;quot;);
  java.io.FileInputStream fis = new java.io.FileInputStream(fz);
  InputStreamReader isr = new InputStreamReader( fis, &amp;quot;UTF-8&amp;quot; );
  PD4ML html = new PD4ML();
  URL base = new URL( &amp;quot;file:D:/tools/&amp;quot; );
  html.render( isr, fos, base );
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Formatting the PDF document generated&lt;/h3&gt;
&lt;p&gt;The PDF getting generated can be formatted using various methods. Some of the most commonly used ones are given below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  PD4ML html = new PD4ML();
  html.setPageSize( new Dimension(450, 450) );
  //defines page size in points. A set of predefined page format constants is available in the PD4Constants interface.
  html.setPageInsets( new Insets(20, 50, 10, 10) );
  //specifies page insets in points
  html.setHtmlWidth( 750 );
  //defines desired HTML page width in screen pixels. Virtually it can be seen as a web browser window horizontal resize
  html.enableImgSplit( false );
  //allows to disable image splitting by page breaks. By default the option is true (splitting enabled).
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;For Generating Text-Only Header and Footer&lt;/h4&gt;
&lt;p&gt;Static or template text can be used for header and footer of the PDF document. The header and the footer can be set with various formats. Few of them are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  PD4PageMark header = new PD4PageMark();
  header.setAreaHeight( 20 );
  //defines height of the header or footer area
  header.setTitleTemplate( &amp;quot;title: $[title]&amp;quot; );
  //defines a template for page title representation.
  //No title is printed, if the titleTemplate is set to null. Default value is null.
  header.setTitleAlignment( PD4PageMark.CENTER_ALIGN );
  //defines alignment for the page title string in the document&amp;#39;s header of footer
  header.setPageNumberAlignment( PD4PageMark.LEFT_ALIGN );
  //defines alignment for the page numbers in the document&amp;#39;s header of footer area
  header.setPageNumberTemplate( &amp;quot;#$[page]&amp;quot; );
  //defines a template for page number representation
  PD4PageMark footer = new PD4PageMark();
  footer.setAreaHeight( 30 );
  //Already explained above
  footer.setFontSize( 20 );
  //sets font size for the header or footer
  footer.setColor( Color.red );
  //setColor() sets the color of header or footer text
  footer.setPagesToSkip( 1 );
  //defines a number of pages from the document beginning, that should not be marked with the header or footer info
  footer.setTitleTemplate( &amp;quot;[ $[title] ]&amp;quot; );
  //Already explained above
  footer.setPageNumberTemplate( &amp;quot;page: $[page]&amp;quot; );
  //Already explained above
  footer.setTitleAlignment( PD4PageMark.RIGHT_ALIGN );
  //Already explained above
  footer.setPageNumberAlignment( PD4PageMark.LEFT_ALIGN );
  //Already explained above

  pd4ml.setPageHeader( header );
  pd4ml.setPageFooter( footer );
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Protecting PDF documents&lt;/h4&gt;
&lt;p&gt;A PDF document can be encrypted to protect its contents from unauthorized access. PD4ML supports PDF access permissions concept and allows a password to be specified for a document. If any passwords or access restrictions are specified with PD4ML.setPermissions (), the document is encrypted, and the permissions and information required to validate the passwords are stored to the resulting document.&lt;/p&gt;
&lt;p&gt;The possible restrictions are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Modifying the document’s contents&lt;/li&gt;
  &lt;li&gt;Copying or otherwise extracting text and graphics from the document&lt;/li&gt;
  &lt;li&gt;Adding or modifying text annotations&lt;/li&gt;
  &lt;li&gt;Printing the document&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The various types of pre-set Permissions available in the API are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AllowAssembly&lt;/li&gt;
  &lt;li&gt;AllowContentExtraction&lt;/li&gt;
  &lt;li&gt;AllowCopy&lt;/li&gt;
  &lt;li&gt;AllowDegradedPrint&lt;/li&gt;
  &lt;li&gt;AllowModify&lt;/li&gt;
  &lt;li&gt;AllowPrint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PDF document produced by PD4ML can be protected with 40-bit or 128-bit encryption using the various Permission levels given above.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  String password = &amp;quot;empty&amp;quot;;
  boolean strongEncryption = true;
  int permissions = PD4Constants.AllowPrint | PD4Constants.AllowCopy;
  pd4ml.setPermissions( password, permissions, strongEncryption );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the other salient Features that are available with PD4ML are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Converting HTML headings or named anchors to PDF bookmarks&lt;/li&gt;
  &lt;li&gt;Named anchors&lt;/li&gt;
  &lt;li&gt;Inserting page breaks&lt;/li&gt;
  &lt;li&gt;generating and sending PDF by email&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using PD4ML in Web applications for online PDF generation&lt;/h3&gt;
&lt;p&gt;PD4ML can be used in Web applications for online PDF generation from HTML, JSP and Servlet templates. A simple example is given below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;taglib uri=&amp;quot;http://pd4ml.com/tlds/pd4ml/2.5&amp;quot; prefix=&amp;quot;pd4ml&amp;quot;&amp;gt;
  &amp;lt;page contentType=&amp;quot;text/html; charset=UTF-8&amp;quot;&amp;gt;

  &amp;lt;pd4ml:transform
        screenWidth=&amp;quot;400&amp;quot;
        pageFormat=&amp;quot;A5&amp;quot;
        pageOrientation=&amp;quot;landscape&amp;quot;
        pageInsets=&amp;quot;100,100,100,100,points&amp;quot;
        enableImageSplit=&amp;quot;false&amp;quot;&amp;gt;

    &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
              &amp;lt;title&amp;gt;pd4ml test&amp;lt;/title&amp;gt;
              &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
                    body {
                          color: red;
                          background-color: #FFFFFF;
                          font-family: Tahoma, &amp;quot;Sans-Serif&amp;quot;;
                          font-size: 10pt;
                    }
              &amp;lt;/style&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
             &amp;lt;img src=&amp;quot;images/logos.gif&amp;quot; width=&amp;quot;125&amp;quot; height=&amp;quot;74&amp;quot;&amp;gt;
              &amp;lt;p&amp;gt;
              Hello, World!
          &amp;lt;pd4ml:page.break/&amp;gt;
              &amp;lt;table width=&amp;quot;100%&amp;quot; style=&amp;quot;background-color: #f4f4f4; color: #000000&amp;quot;&amp;gt;
              &amp;lt;tr&amp;gt;
              &amp;lt;td&amp;gt;
                    Hello, New Page!
              &amp;lt;/td&amp;gt;
              &amp;lt;/tr&amp;gt;
              &amp;lt;/table&amp;gt;
        &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
  &amp;lt;/pd4ml:transform&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to get a PDF output, we need to surround the HTML or JSP with &amp;lt;pd4ml:transform&amp;gt; tags or refer to the markup from an external PD4ML-enabled JSP or Servlets.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;PD4ML JSP taglib declaration and opening transform tag. JSP content surrounded with&lt;br/&gt; &lt;code&gt;&amp;lt;pd4ml:transform&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/pd4ml:transform&amp;gt;&lt;/code&gt; tags is passed to the PD4ML converter.&lt;/li&gt;
  &lt;li&gt;Image should be referenced with relative path. Absolute URLs, like &lt;code&gt;src=&amp;quot;http://myserver:80/path/to/img.gif&amp;quot;&lt;/code&gt; are allowed as well, but &lt;code&gt;src=&amp;quot;/path/to/img.gif&amp;quot;&lt;/code&gt; is not allowed.&lt;/li&gt;
  &lt;li&gt;The directive forces PD4ML converter to insert a page break to the output PDF.&lt;/li&gt;
  &lt;li&gt;Closing of the transformation tag. Any content that appears after the tag is ignored.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Defining PDF document footer (or header) with JSP custom tag&lt;/h4&gt;
&lt;p&gt;The header and/or footer for the PDF can be declared in the jsp in the following fashion.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;pd4ml:footer
      titleTemplate=&amp;quot;[${title}]&amp;quot;
      pageNumberTemplate=&amp;quot;page ${page}&amp;quot;
      titleAlignment=&amp;quot;left&amp;quot;
      pageNumberAlignment=&amp;quot;right&amp;quot;
      color=&amp;quot;#008000&amp;quot;
      initialPageNumber=&amp;quot;1&amp;quot;
      pagesToSkip=&amp;quot;1&amp;quot;
      fontSize=&amp;quot;14&amp;quot;
      areaHeight=&amp;quot;18&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Title template definition. A string that can optionally contain placeholders ${title} for a title value taken from HTML&apos;s TITLE tag, ${page} for a page counter value.&lt;/li&gt;
  &lt;li&gt;Page number template definition. A string with placeholder ${page} for a page counter value.&lt;/li&gt;
  &lt;li&gt;The attribute initializes internal page counter with the given value.&lt;/li&gt;
  &lt;li&gt;The attribute defines, that 1 page should not contain footer information.&lt;/li&gt;
  &lt;li&gt;Footer area height in points.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Adding Dynamic data&lt;/h4&gt;
&lt;p&gt;Dynamic data like data from session or scriplets can be used in the PDF generation. A Simple Example is given below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;% String template = getFormattedDate() + &amp;quot;, page ${page} &amp;quot;; %&amp;gt;
  &amp;lt;pd4ml:footer
      pageNumberTemplate=&amp;quot;&amp;lt;%=template%&amp;gt;&amp;quot;
      .......
      /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the entire form generation for Presentation Frameworks like Struts etc., can be used just like a normal JSP. This provides a nice demarcation and seamless integration of the presentation (Format/Layout) of the PDF document and the business behind the generation&lt;/p&gt;
&lt;h4&gt;Temporary saving generated PDF to hard drive&lt;/h4&gt;
&lt;p&gt;With &lt;code&gt;&amp;lt;pd4ml:savefile&amp;gt;&lt;/code&gt; tag you have possibility to store just generated PDF to hard drive and redirect user&apos;s browser to read the PDF as static resource or to redirect the request to another URL for PDF post-processing. The tag should be nested within &lt;code&gt;&amp;lt;pd4ml:transform&amp;gt;&lt;/code&gt; and should not have a body.There are two ways of generating the PDF and redirecting the browser.&lt;/p&gt;
&lt;h4&gt;Routing the browser to the PDF generated&lt;/h4&gt;
&lt;p&gt;Once the PDF is generated the user can be directed to the generated PDF using the following piece of code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;pd4ml:savefile
      uri=&amp;quot;/WEB/savefile/saved/&amp;quot;
      dir=&amp;quot;D:/spool/generated_pdfs&amp;quot;
      redirect=&amp;quot;pdf&amp;quot;
      debug=&amp;quot;false&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tag above forces PD4ML to save the generated PDF to D:/spool/generated_pdfs with an autogenerated name.It is expected, that local directory D:/spool/generated_pdfs corresponds to URL &lt;code&gt;http://yourserver.com/WEB/savefile/saved/&lt;/code&gt; (as given in &quot;uri&quot; attribute)&lt;/p&gt;
&lt;p&gt;After generation PD4ML will send to client&apos;s browser a redirect command with URL like that:&lt;br/&gt;&lt;code&gt;http://yourserver.com/WEB/savefile/saved/generated_name.pdf&lt;/code&gt;&lt;br/&gt;where,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://yourserver.com&lt;/code&gt; - Context path&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/WEB/savefile/saved&lt;/code&gt; - URI given&lt;/p&gt;
&lt;p&gt;&lt;code&gt;generated_name.pdf&lt;/code&gt; - Auto generated file Name&lt;/p&gt;
&lt;h4&gt;Routing the browser to the next page&lt;/h4&gt;
&lt;p&gt;However if the browser needs to be redirected to the next page instead of the PDF generated, it can be done in the following way.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;pd4ml:savefile
      dir=&amp;quot;D:/spool/generated_pdfs&amp;quot;
      redirect=&amp;quot;/mywebapp/send_pdf_by_email.jsp&amp;quot;
      debug=&amp;quot;false&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tag above forces PD4ML to save the generated PDF to D:/spool/generated_pdfs with an auto generated name. After that it forwards to /mywebapp/send_pdf_by_email.jsp with a REQUEST parameter filename=&lt;code&gt;&amp;lt;pdfname&amp;gt;&lt;/code&gt;. So send_pdf_by_email.jsp can read file name using,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  String fileName = request.getParameter(&amp;quot;filename&amp;quot;);
  //Building the full path of the PDF generated
  String path = &amp;quot;D:/spool/generated_pdfs&amp;quot; + &amp;quot;/&amp;quot; + fileName;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hence that JSP can read the just-generated PDF file and and perform post-processing or any other actions (like E-mail or File-Upload).&lt;/p&gt;
&lt;p&gt;In both cases above you can predefine PDF file name with &quot;name&quot; attribute. If a file with the name is already exists in D:/spool/generated_pdfs, than the new file name is appended with an auto-incremented numeric value.&lt;/p&gt;
&lt;h3&gt;Instructions for Installation&lt;/h3&gt;
&lt;p&gt;PD4ML is intended to be used with JDK1.3.1 and above .For deploying PD4ML as either Console application and for online generation, use the following jars available at the PD4ML site (Given in the references)&lt;br/&gt;• pd4ml.jar&lt;br/&gt;• pd4ml_tl.jar(for the tag library)&lt;/p&gt;
&lt;h4&gt;Professional Version Features&lt;/h4&gt;
&lt;p&gt;Apart from the various features discussed above, the licensed professional version includes lots of additional features such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TTF embedding&lt;/li&gt;
  &lt;li&gt;Configuring Fonts directory&lt;/li&gt;
  &lt;li&gt;Embedding fonts to PDF from Java API&lt;/li&gt;
  &lt;li&gt;Embedding fonts to PDF from JSP&lt;/li&gt;
  &lt;li&gt;Watermark images&lt;/li&gt;
  &lt;li&gt;Table of contents&lt;/li&gt;
  &lt;li&gt;General notes&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Other libraries&lt;/h4&gt;
&lt;p&gt;Few other libraries that are available for PDF generation are &lt;a href=&quot;http://xmlgraphics.apache.org/fop/&quot;&gt;Apache FOP&lt;/a&gt; and &lt;a href=&quot;http://itextpdf.com/functionality&quot;&gt;iText&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apache FOP&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Apache FOP (Formatting Objects Processor) is a print formatter driven by XSL formatting objects (XSL-FO) and an output independent formatter. It is a Java application that reads a formatting object (FO) tree and renders the resulting pages to a specified output. Output formats currently supported include PDF, PS, PCL, AFP, XML (area tree representation), Print, AWT and PNG, and to a lesser extent, RTF and TXT. The primary output target is PDF.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;iText&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;iText is an open source library that allows you to create and manipulate PDF documents. It enables developers looking to enhance web and other applications with dynamic PDF document generation and/or manipulation.&quot;&lt;br/&gt;- &lt;a href=&quot;http://itextpdf.com/&quot;&gt;http://itextpdf.com/&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pd4ml.com/api/index.html&quot;&gt;http://pd4ml.com/api/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pd4ml.com/index.htm&quot;&gt;http://pd4ml.com/index.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
	</description>
    </item>
    <item>
      <title>Spreadsheet generation using Java libraries</title>
      <link>http://sengopal.github.io/blog//blog/spreadsheet-generation-using-java-libraries.html</link>
      <pubDate>Wed, 23 Sep 2009 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/spreadsheet-generation-using-java-libraries.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Web Asset Tracker (WATr) is a web application which was mainly used to maintain various asset information using a RDBMS database. There rose a specific requirement where the application needs to render the data in a downloadable spreadsheet. The following post documents the comparison of leading industry frameworks for creating MS-Excel Spreadsheets using Java.
== Purpose
The purpose of this document is to list out the usage and pros/cons of the following Excel Java APIs:
1. Apache POI
2. Java Excel API [JXL]
3. OpenXLS [Product of ExtenXLS]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_scope&quot;&gt;Scope&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For comparison of the JS frameworks, the following list of criteria were used&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The API should have the ability&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;to read existing Spreadsheets in MS-Excel 97, 2000, XP, 2003 and 2007 formats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to read existing Spreadsheets in ODS [OpenOffice.org Calc Spreadsheet] formats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provide interoperability between various formats/versions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to edit existing Spreadsheets in the above mentioned formats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to create new spreadsheets in the above mentioned formats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to preserve and create formula and functions on various worksheets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to manipulate multiple worksheets within a workbook&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to manipulate, create and edit chart information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to freeze and split panes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to format cells,cell patterns, fonts and borders&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for row and column sizing, formatting, auto-sizing, insertion and deletion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for cell validations and named ranges&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for row and column grouping and collapsing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to draw shapes using the microsoft office drawing tools&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to add cell comments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to define printable formats and printing headers/footers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to add embeddable objects&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The API should also possess
1.	Matured Documentation, Tutorials and Examples
2.	Many adaptations
3.	Active development and community support&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_apache_poi&quot;&gt;Apache POI&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apache POI, a project run by the Apache Software Foundation, and previously a sub-project of the Jakarta Project, provides pure Java libraries for reading and writing files in Microsoft Office formats, such as Word, PowerPoint and Excel. The name was originally an acronym for &quot;Poor Obfuscation Implementation&quot;, referring humorously to the fact that the file formats seemed to be deliberately obfuscated, but poorly, since they were successfully reverse-engineered. This explanation - and those of the similar names for the various sub-projects - were removed from the official web-pages in order to better market the tools to businesses who would not consider such humour appropriate. The POI project is the master project for developing pure Java ports of file formats based on Microsoft&amp;#8217;s OLE 2 Compound Document Format. OLE 2 Compound Document Format is used by Microsoft Office Documents, as well as by programs using MFC property sets to serialize their document objects.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Wikipedia
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The various components of the Apache POI API are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;POIFS is the set of APIs for reading and writing OLE 2 Compound Document Formats using (only) Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HSSF and XSSF are the set of APIs for reading and writing Microsoft Excel 97-2007 and OOXML spreadsheets using (only) Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HWPF is the set of APIs for reading and writing Microsoft Word 97(-XP) documents using (only) Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HSLF is the set of APIs for reading and writing Microsoft PowerPoint 97(-XP) documents using (only) Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HPSF is the set of APIs for reading property sets using (only) Java.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_java_excel_api&quot;&gt;Java Excel API&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java Excel API is a mature, open source java API enabling developers to read, write, and modifiy Excel spreadsheets dynamically. Now java developers can read Excel spreadsheets, modify them with a convenient and simple API, and write the changes to any output stream (e.g. disk, HTTP, database, or any socket).&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Wikipedia
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of the available features are:
1.	Reads data from Excel 95, 97, 2000, XP, and 2003 workbooks
2.	Reads and writes formulas (Excel 97 and later only)
3.	Generates spreadsheets in Excel 2000 format
4.	Supports font, number and date formatting
5.	Supports shading, bordering, and coloring of cells
6.	Modifies existing worksheets
7.	Supports copying of charts
8.	Supports insertion and copying of images into spreadsheets
9.	Supports logging with Jakarta Commons Logging, log4j, JDK 1.4 Logger, etc&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_limitations&quot;&gt;Limitations&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;JExcelApi does not generate or chart, graph or macro information. This information is however preserved when spreadsheets are copied&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When adding images to a sheet, only PNG image formats are supported&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jexcel fails fatally when encountering invalid formulas, so parsing client supplied spreadsheets might be a problem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Poor Documentation for any of the advanced features like validation lists, column and cell formatting&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_openxls_api&quot;&gt;OpenXLS API&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenXLS is the open-source version of ExtenXLS (commercial Java SDK)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of the available features are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Compatible with Excel &apos;97-2003 file formats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control over charts, formulas, and formatting from Java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Based on robust ExtenXLS 6 Codebase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Drop-in upgradability to ExtenXLS supported versions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good documentation, user guide, and sample code gets you up to speed fast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert, size, and position JPG, GIF, and PNG images in your Spreadsheet files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control over spreadsheet formatting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preserves Charts, PivotTables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preservation of VB macros (NOTE: VB runtime execution not supported)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;200+ Formula Functions Supported&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create and work with Named Ranges&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supports Merged Cells&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert Spreadsheets to XML and vice-versa&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_limitations_2&quot;&gt;Limitations&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Features are very less when compared with its commerical counter-part.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support is not available either through an active community or the organization&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions mostly like a spring board to use the commerical version&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does not support Excel 2007&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does not support Open Office Spreadsheet format&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_application_integration&quot;&gt;Application Integration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Where we are trying to fit in this framework&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Java Excel API should
* should provide us with well documented and mature API
* hould provide us with extension points for providing our own customizations&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;How it is aligned with our current requirements&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Java Excel API should
* Provide us with ability to format Excel sheets
* Validation rules for cells/columns
* Formula validation and insertion&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Is it going to be one-off (or) continued usage?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Java Excel API should be such that
* It can added as a plugin to the framework
* It makes the export / import functionality implementation seamless
* It has the capability to render images, charts etc.,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_inferences&quot;&gt;Inferences&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The inferences gained from performing this comparison:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;JXL can be used for faster rendering, however will fail in terms of huge data sets or failed formulae&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenXLS acts just as a springboard to its commerical counterpart and has limited functionality&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache POI has a matured and active community support with rapid releases, good documentation and lots of features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache POI also has functionalities for OpenOffice documents which would help in transforming results in spreadsheet to other formats such as PDF, Word or PPT&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With these criteria in mind and based on the scope provided, &lt;strong&gt;Apache POI&lt;/strong&gt; was chosen to be integrated within the framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Note: This is based upon reading the available documentation, limited user experience and discussion forums&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://poi.apache.org/&quot; class=&quot;bare&quot;&gt;http://poi.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://poi.apache.org/spreadsheet/quick-guide.html&quot; class=&quot;bare&quot;&gt;http://poi.apache.org/spreadsheet/quick-guide.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://olex.openlogic.com/packages/poi&quot; class=&quot;bare&quot;&gt;https://olex.openlogic.com/packages/poi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://poi.apache.org/news.html&quot; class=&quot;bare&quot;&gt;http://poi.apache.org/news.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://jexcelapi.sourceforge.net/&quot; class=&quot;bare&quot;&gt;http://jexcelapi.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://olex.openlogic.com/packages/jexcel-api&quot; class=&quot;bare&quot;&gt;https://olex.openlogic.com/packages/jexcel-api&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.extentech.com/estore/product_features.jsp?product_group_id=228&quot; class=&quot;bare&quot;&gt;http://www.extentech.com/estore/product_features.jsp?product_group_id=228&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/openxls/&quot; class=&quot;bare&quot;&gt;http://sourceforge.net/projects/openxls/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Job chaining using Quartz</title>
      <link>http://sengopal.github.io/blog//blog/job-chaining-using-quartz.html</link>
      <pubDate>Tue, 31 Mar 2009 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/job-chaining-using-quartz.html</guid>
      	<description>
	&lt;h3&gt;Project Usage&lt;/h3&gt;
&lt;p&gt;Our Project had the requirement of reading a set of records from a table which acts as a queue and sends the pending mails. This reading /sending of mails has to happen every five minutes. However, since the SMTP server needs to address online mailing at times, this job may run more than the given five minutes. Also, if the number of records in the table is high, the Job exceeds the expected time of completion of five minutes. Hence it was decided to “chain” the jobs with a five minute delay.&lt;/p&gt;
&lt;h3&gt;Introduction to Quartz&lt;/h3&gt;
&lt;p&gt;Quartz is an open source job scheduling framework that provides simple but powerful mechanisms for job scheduling in Java applications. Quartz allows developers to schedule jobs by time interval or by time of day. It implements many-to-many relationships for jobs and triggers and can associate multiple jobs with different triggers.&lt;br/&gt;Applications that incorporate Quartz can reuse jobs from different events and also group multiple jobs for a single event. While you can configure Quartz through a property file (in which you can specify a data source for JDBC transactions, global job and/or trigger listeners, plug-ins, thread pools, and more) it is not at all integrated with the application server&apos;s context or references.&lt;/p&gt;
&lt;h3&gt;Jobs and triggers&lt;/h3&gt;
&lt;p&gt;The two fundamental units of Quartz&apos;s scheduling package are jobs and triggers. A job is an executable task that can be scheduled, while a trigger provides a schedule for a job. While these two entities could easily have been combined, their separation in Quartz is both intentional and beneficial. By keeping the work to be performed separate from its scheduling, Quartz allows you to change the scheduled trigger for a job without losing the job itself, or the context around it. Also, any singular job can have many triggers associated with it.&lt;/p&gt;
&lt;h3&gt;Simple Job Example&lt;/h3&gt;
&lt;p&gt;An example of a Quartz job is given below. This class overrides the execute () (JobExecutionContext context) method with a very simple output statement. This method can contain any code that constitutes the job to be executed&lt;/p&gt;
&lt;h4&gt;SimpleQuartzJob.java&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;import java.util.Date;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class SimpleQuartzJob implements Job {

    public SimpleQuartzJob() {
    }

    public void execute(JobExecutionContext context) throws JobExecutionException {
        System.out.println(&amp;quot;In SimpleQuartzJob - executing its JOB at &amp;quot;
                + new Date() + &amp;quot; by &amp;quot; + context.getTrigger().getName());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Notice that the execute method takes a JobExecutionContext object as an argument. This object provides the runtime context around the job instance. Specifically, it gives access to the scheduler and trigger, which collaborated to initiate execution of the job as well as the job&apos;s JobDetail object. Quartz separates the execution and the surrounding state of a job by placing the state in a JobDetail object and having the JobDetail constructor initiate an instance of a job. The JobDetail object stores the job&apos;s listeners, group, data map, description, and other properties of the job.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Simple Trigger Example&lt;/h4&gt;
&lt;p&gt;A trigger develops a schedule for job execution. Quartz offers a few different trigger options of varying complexity. The SimpleTrigger given below shows the fundamentals of triggers.&lt;/p&gt;
&lt;h4&gt;SimpleTriggerRunner.java&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.Trigger;
import org.quartz.TriggerUtils;
import org.quartz.impl.StdSchedulerFactory;

public class Test{
    public void scheduleTask() throws SchedulerException {
        try{
            logger.info(&amp;quot;Starting the scheduler in Quartz&amp;quot;);
            StdSchedulerFactory schedFact = new StdSchedulerFactory();
            Scheduler sched = schedFact.getScheduler();
            logger.info(&amp;quot;Scheduling a Tickler job in Quartz&amp;quot;);

                //Making a daily Trigger for the Job
            Trigger simpleTrigger = TriggerUtils.makeDailyTrigger(2, 00);
            simpleTrigger.setName(&amp;quot;SimpleQuartzTrigger&amp;quot;);
            simpleTrigger.setGroup(Scheduler.DEFAULT_GROUP);
            JobDetail simpleJob = new JobDetail(&amp;quot;SimpleQuartzJob&amp;quot;, Scheduler.DEFAULT_GROUP, SimpleQuartzJob.class);
            sched.scheduleJob(simpleJob,simpleTrigger);
            logger.info(&amp;quot;Tickler Mail Job Scheduled&amp;quot;);
        }
        catch(Exception e){
            logger.info(&amp;quot;Error while scheduling the jobs.&amp;quot;);
            logger.error(e);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The scheduling method starts by instantiating a SchedulerFactory and getting the scheduler. As discussed earlier, the JobDetail object is created by taking the Job (SimpleQuartzJob) as an argument to its constructor. The TriggerUtils.makeDailyTrigger creates a simple trigger which executes the associated job(s) at 2:00 am everyday&lt;br/&gt;There are a number of other ways to manipulate a SimpleTrigger. In addition to a specified number of repeats and a specified repeat interval, jobs may be schedules to execute at a specific calendar time, given a maximum time of execution, or given a priority. Some of the advanced concepts include CronTriggers, Job Stores, and JobMap etc.,&lt;/p&gt;
&lt;h3&gt;Need for Job Chaining&lt;/h3&gt;
&lt;p&gt;The job known as “MailProcessor” needs to be scheduled every 5 minutes i.e., this job has to execute every five minutes. The code which was used for scheduling the job is given below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Trigger mailProcTrigger = TriggerUtils.makeMinutelyTrigger(5);
mailProcTrigger.setName(SchedulingConstants.MAILPROCESSOR_TRIGGER_NAME);
mailProcTrigger.setGroup(Scheduler.DEFAULT_GROUP);
JobDetail mailProc = new JobDetail(SchedulingConstants.MAILPROCESSOR_JOB_NAME, Scheduler.DEFAULT_GROUP, MailProcessor.class);
sched.scheduleJob(mailProc,mailProcTrigger);
logger.info(&amp;quot;Mail Processor Scheduled&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Following are the issues faced with this kind of scheduling&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The SMTP Server needs to address online mailing at times.&lt;/li&gt;
  &lt;li&gt;The number of records in the table is high and hence the number of mails to be sent are higher in number&lt;/li&gt;
  &lt;li&gt;Due to the above reasons, this job may have a completion of time of more than five minutes, which means that the next schedule of the same will get triggered even before the first one completes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hence to resolve this, we need to chain the jobs such that the job gets “re-scheduled” only after the first job is completed. This is known as “Job-Chaining”&lt;/p&gt;
&lt;h3&gt;Job Chaining – How it was implemented&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;A Utility Method for returning the time 5 minutes from now and another Utility method for returning a SimpleTrigger using the NextScheduledTime are created.&lt;/li&gt;
  &lt;li&gt;The first time scheduling of the Job is done with a SimpleTrigger (Utility method) which starts the first job 5 minutes from the starting instance
    &lt;p&gt;//The Utility method to return the Next Scheduling time 5 minutes from now&lt;br/&gt;public static Date getNextMailScheduledTime() {&lt;br/&gt; Calendar cal = Calendar.getInstance();&lt;br/&gt; System.out.println(&quot;Date Current: &quot;+cal.getTimeInMillis());&lt;br/&gt; cal.add(Calendar.MINUTE,1);&lt;br/&gt; System.out.println(&quot;Date after addition: &quot;+cal.getTimeInMillis());&lt;br/&gt; return cal.getTime();&lt;br/&gt;}&lt;/p&gt;
    &lt;p&gt;//The Utility Method to return a SimpleTrigger which used the NextScheduledTime Utility Method for the Triggering time&lt;br/&gt;public static Trigger getMailProcessorTrigger() {&lt;br/&gt; Date newDate = VsimsUtil.getNextMailScheduledTime();&lt;br/&gt; Trigger mailTrigger = new SimpleTrigger(SchedulingConstants.MAILPROCESSOR_TRIGGER_NAME, Scheduler.DEFAULT_GROUP,newDate);&lt;br/&gt; mailTrigger.setJobName(SchedulingConstants.MAILPROCESSOR_JOB_NAME);&lt;br/&gt; mailTrigger.setJobGroup(Scheduler.DEFAULT_GROUP);&lt;br/&gt; return mailTrigger;&lt;br/&gt;}&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Scheduling the Job for the First Run&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Using the Utility methods the “MailProcessor” Job is scheduled to run after Five minutes from the current Instance&lt;/li&gt;
  &lt;li&gt;Since a specific time instance is given for the Trigger, this Job will get Triggered only once
    &lt;p&gt;JobDetail mailJobDetail = new JobDetail(&quot;MailProcessorJob&quot;,Scheduler.DEFAULT_GROUP, MailProcessor.class);&lt;br/&gt;sched.scheduleJob(mailJobDetail,VsimsUtil Util.getMailProcessorTrigger());&lt;br/&gt;logger.info(&quot;Mail Processor Scheduled&quot;);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: &lt;em&gt;Since the Job is being scheduled for the first time we have to use sched.scheduleJob() for scheduling the job&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the Execute method of the Job, once the Job gets fired for the first time by the Trigger created, the Job Execution steps are completed and then the job gets “re-scheduled’ after five minutes using the same Utility method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void execute(JobExecutionContext jobContext) throws JobExecutionException {
        logger.info(&amp;quot;MailProcessor execute - start&amp;quot;);

        //PERFORM THE JOB EXECUTION STEPS HERE
        //Chaining of the Job by re-scheduling
        try {
            logger.info(&amp;quot;Scheduler Instance Id in Mail Processor: &amp;quot;+
                + jobContext.getScheduler().getSchedulerInstanceId());

            //If Rescheduled Correctly, the Scheduler returns the next Scheduled Time of the JOB
            Date nextScheduledTime = jobContext.getScheduler().rescheduleJob
                (&amp;quot;MailProcessorJob&amp;quot;, Scheduler.DEFAULT_GROUP, Util.getMailProcessorTrigger());
            logger.info(&amp;quot;Rescheduled at : &amp;quot;+nextScheduledTime);
        } catch (SchedulerException e) {
            logger.error(&amp;quot;Error in Scheduling the Job for the Next Iteration&amp;quot;);
            e.printStackTrace();
        }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: &lt;em&gt;Since the same job is being chained, we have to use rescheduleJob().&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The re-scheduling also happens using the Trigger returned by the Utility Method. Hence the job gets rescheduled only once. Hence the subsequent run of the job will reschedule the job again for its next run. Thus we achieve chaining of the job runs&lt;/p&gt;
&lt;p&gt;References&lt;br/&gt;* &lt;a href=&quot;http://quartz.sourceforge.net/firstTutorial.html&quot;&gt;http://quartz.sourceforge.net/firstTutorial.html&lt;/a&gt;&lt;br/&gt;* &lt;a href=&quot;http://www-128.ibm.com/developerworks/java/library/j-quartz/&quot;&gt;http://www-128.ibm.com/developerworks/java/library/j-quartz/&lt;/a&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Aceing SCJP - Notes from Kathy Sierra Prep book - Part 2</title>
      <link>http://sengopal.github.io/blog//blog/scjp-notes-from-kathy-sierra-part2.html</link>
      <pubDate>Mon, 8 Sep 2008 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/scjp-notes-from-kathy-sierra-part2.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I recently completed the Sun Certified Java Programmer from Sun Microsystems and thought of sharing my notes and gotchas from the Kathy Sierra SCJP preparation book which was the best material to prepare for this certification. All the below notes are material extracted from this &lt;a href=&quot;https://www.amazon.com/SCJP-Certified-Programmer-Java-310-065/dp/0071591060&quot;&gt;Kathy Sierra&amp;#8217;s book&lt;/a&gt;. The below notes are from the 2008 edition and might not be reflective of the latest Chapter specifics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the continuation of &lt;a href=&quot;scjp-notes-from-kathy-sierra-part1.html&quot;&gt;Part1&lt;/a&gt; notes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chapter_7&quot;&gt;Chapter 7&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Comparing two reference variables of different hierarchies gives COMPILATION error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STRINGBUFFER does NOT have an overridden equals method. However, STRING and WRAPPER classes have them&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; &amp;#8658; Reflexive (x.x), Symmetric (x.y) and Transitive (x.y.z) and consistent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If two objects are equal then their hashcodes should be equal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; takes OBJECTas parameter and returns boolean. Hashcode() returns int&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Hashcode Contract and Table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Types of Collections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only List and Set extend Collection not Map&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;java.util.Collection&lt;/code&gt; is the Superclass for List and Set while &lt;code&gt;java.util.Collections&lt;/code&gt; is the class with utilities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Collection Class Hierarchy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An implementation of collection can NEVER be Unordered if it is sorted but all other combinations is possible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HashSet&lt;/strong&gt; - UnOrdered and UnSorted. &lt;strong&gt;LinkedHashSet&lt;/strong&gt; - Ordered and UnSorted&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vector(synchronized) and ArrayList are the Only to classes to implement RandomAccess&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LinkedHashSet&lt;/strong&gt; can be iterated in the Order of Entry or in the Order of Last accessed(useful for caching)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TreeSet&lt;/strong&gt; uses a Red-Black Structure for the natural Ordering and has a constructor for defining the natural ordering of the Objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hashtable&lt;/strong&gt; is synchronized and does NOT allow a null key while HashMap is not synchronized and allows one null key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Collection Interfaces and Concrete Implementation Classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chapter_8&quot;&gt;Chapter 8&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Top Level Nested Class is an Inner class marked static&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When trying to create an innerclass object outside the Outer Class or in a Static method of the Outer Class, we need to CREATE an Object of the Outer class - &lt;code&gt;MyOuter.Myinner inObj = new MyOuter().new MyInner();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To Access the &lt;strong&gt;this&lt;/strong&gt; object, the outer class &lt;strong&gt;this&lt;/strong&gt; is referred as &lt;strong&gt;MyOuter.this&lt;/strong&gt; within the innerclass instance members&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Inner class members can be STATIC only if the inner class itself is declared as STATIC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifiers for the CLASS LEVEL inner class are : &lt;strong&gt;final, abstract, public&lt;/strong&gt; (allowed for all classes), &lt;strong&gt;private, protected&lt;/strong&gt; and &lt;strong&gt;static&lt;/strong&gt; (only for inner classes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifiers for the METHOD LEVEL inner class are: abstract and final (cannot be used together)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Method Level inner Class CANNOT access the method local variables unless it is marked final&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can access the class level variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The class can be instantiated only within the method and it has to be done only after the class declaration is completed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Animal h = new Horse();&lt;/code&gt; Here since the object is determined at runtime ONLY THE OVERRIDEN METHODS of HORSE can be accessed and the Animal methods can be accessed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Anonymous Inner Class, we CANNOT create an altogether new Class. We have to either extend or implement any existing class. This means we can only OVERRIDE the methods available and NO new methods can be added in Anonymous Inner Class(though new methods can be added, they CANNOT be accessed at all outside the anonymous class as the object type would be that of the superclass used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In anonymous Inner class when you access the class object, it extends or implements the superclass implicitly, hence the Constructors will be called when the class instance is accessed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Runnable r = new Runnable()&lt;/code&gt;; (compilation Error) as Runnable is an Interface. However, &lt;code&gt;Runnable r = new  Runnable() {public void run(){}};&lt;/code&gt; is vaild&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the anonymous class is created within the argument of a method, the closing semicolon appears after the argument close bracket. &lt;code&gt;=&amp;#8658; });&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A static nested class does not have acccess to the member and instance variables of the outer class. Look out for questions which does this&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Normal Class: &lt;code&gt;MyOuter.MyInner inObj = new MyOuter().new MyInner();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static Class: &lt;code&gt;MyOuter.MyInner inObj = MyOuter.MyInner();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static Nested Class can have both static and non-static members but can access ONLY the static members of the outer class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When an anonymous class implements an interface, it should override the abstract methods else compilation error occurs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for the CORRECT Presence of the Semicolons before going into the syntax and logic checking for inner classes
&lt;code&gt;Object o = new Horse(&quot;zippo&quot;); Horse h = (Horse) o; o.eat();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the cast to Horse is not done, then the object can access only the OBJECT methods and the Horse Overriden ones only&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chapter_9&quot;&gt;Chapter 9&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;start()&lt;/code&gt;, &lt;code&gt;run()&lt;/code&gt;, &lt;code&gt;yield()&lt;/code&gt; and &lt;code&gt;sleep()&lt;/code&gt; - &lt;strong&gt;Important methods in Threads&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Types of Instantiating a Thread Class:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extends Thread - &lt;code&gt;MyThread t = new MyThread();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implements Runnable - &lt;code&gt;MyRunnable r = new MyRunnable(); Thread t = new Thread(r);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calling the &lt;code&gt;run()&lt;/code&gt; DOES NOT start a new stack though its legal. We have to use &lt;code&gt;t.start()&lt;/code&gt; for starting the execution in a new stack&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods for Influencing Execution Control of Threads&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;java.lang.Thread - static sleep(long), static yield(), final join(), final setPriority(int)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.lang.Object - final wait, final notify, final notifyAll()&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sleep&lt;/code&gt; - guaranteed to sleep for the given time except InterruptedException&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; - gives control back, not guaranteed not to run&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;join&lt;/code&gt; - guaranteed to stop execution until the joined thread completes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All these three above methods keeps the lock acquired.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notes about &lt;strong&gt;synchronized&lt;/strong&gt; block:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Only methods can be synchronized&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only one lock&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No need to synchronize all the methods in a class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;multiple threads can still access the non-synchronized methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a thread goes to sleep, it takes the lock with it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when a thread acquires a lock on an object, no other method can access any of the synchronized methods in the class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A thread can have multiple locks&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wait&lt;/code&gt;, &lt;code&gt;notify&lt;/code&gt; and &lt;code&gt;notifyAll&lt;/code&gt;(methods of java.lang.Object) should be called from within a synchronized block because it has to own the lock before waiting or notifying else will get IllegalMonitorStateException&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even when notify is called, the object lock will NOT be released until the end of the synchronized block&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Key Thread Methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for &lt;code&gt;sleep()&lt;/code&gt; or &lt;code&gt;wait()&lt;/code&gt; method without a try-catch block for checked (InterruptedException)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for the same thread being started twice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for synchronized being used on an non-object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Synchronizing the code that calls the calculating method DOES NOT synchronize the action, the synchronized block needs to be applied to the method doing the actual calculation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don’t synchronize the run() method or the code inside it as there might be multiple threads created and each will have its own run method. So synchronize the called method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When two threads are created and a single object is used for accessing the methods, the wait, notify should be within synchronized block as the thread should own the lock of the object before the methods are called. Otherwise, it will throw a runtime exception&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When superclass object reference is used for a sub class object, only the OVERRIDEN methods can be accessed and the variables if printed are from SUPER CLASS only&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;return type should always be immediately before the method name or compilation error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A reference passed into a method is passed as if it were a copy of a pointer pointer rather than the actual object. Thus if that reference is assigned to a null it makes no difference to any other copy of that pointer. Thus the code within the method findOut makes no difference to any other references. Although reference z is assigned to null reference y still points to the object so no objects are eligible for garbage collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because of the way twos complement number representation works the unsigned right shift operation means a small shift in a negative number can return a very large value so the output of option 1 will be much larger than 10.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The unsigned right shift places no significance on the leading bit that indicates the sign. For this shift the value 1 of the bit sign is replaced with a zero turning the result into a positive number for option 2.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shifting can be done only on int, short or byte NOT on long and ALWAYS returns an int (32 bit)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If shifting is done on a long, then the result is always a long (64 bit)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An else clause always belongs to the innermost if without an else, irrespective of the indentation&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In switch case, no two variables can be same&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If switching on a byte, case 128 gives compilation error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only final int can be used in a case, since the value must be confirmed at compile time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;assertions are for situations that will never happen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;assert(true check)&lt;/code&gt; - Throws AssertionError if the tests failed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;assert(check) : expression&lt;/code&gt; - check is always boolean and expression is never void&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;assert is a keyword&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is any statement between the label and the loop then, that label is NOT recogonized and hence compliation error occurs. Also, labels can be of the same name and the innermost one is taken into consideration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Escape slashes are allowed only for b,t,n,f,r, &quot;,&apos;,\&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#,%&lt;/code&gt; cannot be used in a variable name and a number cannot be used at the start of a variable name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a variable is final then if the casting lies within the range, casting is not needed. &lt;code&gt;final short s1 = 1;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;byte s2 = s1;&lt;/code&gt; - compiles correctly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;true&lt;/strong&gt;, &lt;strong&gt;false&lt;/strong&gt; and &lt;strong&gt;null&lt;/strong&gt; are case-SENSITIVE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A call to the super class method can be done using super.methodname and can be placed anywhere in the method.(Static rule applies).Similarly the superclass variables can be accessed using super.also&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The REFERENCE type decides which overloaded  method is being called, while OBJECT type decides which overriden method is called. In fact, &lt;code&gt;Animal a = new Horse(); a.eat(&quot;Carrots&quot;);&lt;/code&gt; give COMPILATION ERROR as the reference type is used for methods present check&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When using &lt;code&gt;super()&lt;/code&gt; or &lt;code&gt;this()&lt;/code&gt; to invoke constructors, they must be on the first line. Any methods that need to be used needs to be static as the object would not be created until the SUPER constructor completes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;return (long) x/y&lt;/code&gt; will give float as the cast is only for x. Also int/int gives only int.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ALWAYS check the NUMERATOR and DENOMINATOR For the return type. If wither Num or Denom is float or double then the result is also float or double&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_miscellaneous&quot;&gt;Miscellaneous&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;First Check for Access Modifiers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for static refering no-static&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for illegal subclassing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watch for method or class names for keyword list. They are not keywords - &lt;code&gt;x=3 =&amp;#8658; ~x = -4 =&amp;#8658; ~x = - (x +1)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;int []a3,[]a4;&lt;/code&gt; here after a comma only a variable should be present&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ALWAYS remember if one else is executed ,all the other else if/else will NOT be executed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even if the called method is static, &lt;strong&gt;this&lt;/strong&gt; can NEVER be used inside a static method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;==&lt;/strong&gt; will work correctly for STRING values if No String Objects are created. &lt;code&gt;&quot;john&quot;==&quot;john&quot;&lt;/code&gt; works correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;start()&lt;/code&gt; method is used to schedule a thread for execution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;protected void finalize() throws Throwable&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;concat()&lt;/strong&gt; is a method of String while append is for StringBuffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All the methods in StringBuffer are synchronized&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Aceing SCJP - Notes from Kathy Sierra Prep book - Part 1</title>
      <link>http://sengopal.github.io/blog//blog/scjp-notes-from-kathy-sierra-part1.html</link>
      <pubDate>Wed, 3 Sep 2008 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/scjp-notes-from-kathy-sierra-part1.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I recently completed the Sun Certified Java Programmer from Sun Microsystems and thought of sharing my notes and gotchas from the Kathy Sierra SCJP preparation book which was the best material to prepare for this certification. All the below notes are material extracted from this &lt;a href=&quot;https://www.amazon.com/SCJP-Certified-Programmer-Java-310-065/dp/0071591060&quot;&gt;Kathy Sierra&amp;#8217;s book&lt;/a&gt;. The below notes are from the 2008 edition and might not be reflective of the latest Chapter specifics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chapter_1&quot;&gt;Chapter 1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Read the keywords list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always check variable, class and method name for the keywords&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variable range is -2(bits – 1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ranges of primitive numbers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Octal (max): 21 digits and Hexadecimal (max): 16 digits without leading 0 and 0x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hexadecimal is case-Insensitive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Octal and Hexadecimal can be used for long also using L suffix&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unicode Character is represented as char x = &apos;\u004E&apos;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;char being assigned out of range integer values (above 65535 or -ve numbers needs a cast to (char)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Size should NOT be given when declaring an array int[5] x is wrong&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Primitive arrays initialize the variables to default value and Object arrays to null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Negative numbers gives ArrayIndexOutOfBoundsException (RuntimeException)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrays has a VARIABLE known as length&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Size should NOT be given for anonymous array int[] x = new int[] {4,5}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For primitives, smaller length values (char, byte and short) can be placed in an int array&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Objects, its subclass reference variables can be placed in an Object array&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Primitive array variables cannot be assigned there restrictive equivalent variables. Int[] x = char[] {6,7,8}. &lt;em&gt;This is not correct&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Object, array variables CAN be assigned there subclass array variables (unlike primitive variables)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Default Values for Primitive and Reference types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Class level String variables will be initialized only to NULL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Local and Class Level Array Variables will be initialized when the array is INITIALIZED int[] a = new int[5]; This will make all the values as 0 in the array, irrespective of where it is declared and initialized&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Local Variables (primitive and Object references) should always be INITIALIZED before use, or compiler error&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chapter_2&quot;&gt;Chapter 2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;strictfp&lt;/code&gt; is only for class and a method and NEVER for a variable. It can be combined with either final or abstract.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a method is ending with a semicolon then that class and the method should be marked abstract (Not needed for interface).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A class can be marked only public or default access. (Not even Protected is allowed)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a class has default access, it can be accessed only within the package level (not even above or sub-packages). Not even importing will work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;abstract and final cannot be used on the class at the same time. This will give a compilation error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a subclass is created, then the methods from the superclass can be accessed by the subclass object or by using this operator (in the subclass methods)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watch out for public static void main accessing the member variables and methods without an Object reference. (Static method cannot access non-static variables)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Private methods CANNOT be overriden. Even if they have the same name and signature, technically it is NOT overriding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;default&lt;/code&gt; method can be accessed only if the class accessing belongs to the same package	PACKAGE Restriction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protected method can be accessed through inhertiance though the subclass is from a different package - &lt;strong&gt;Package + kids&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a subclass outside the package inherits the protected member (inheritance), the member becomes private to any codce outside the class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Access to class Members lesson.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first CONCRETE subclass of an abstract class must implement all abstract methods of the superclasses
&lt;code&gt;public void setSpeed(int speed) { speed=speed;}&lt;/code&gt;. This will just take the local variable speed. We need to declare it as this.speed (NO compilation error)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any variables declared as final has to be initialized either in the declaration itself or in the constructor else Compilation error occurs (If it is not marked final, instance variables need not be initialized). Also it cannot be overriden by sub class constructors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STATIC methods cannot be overriden&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;abstract methods cannot be declared PRIVATE (compliation error), SYNCHRONIZED, strictfp, native and STATIC
synchronized, native and strictfp modifiers can be set only to Methods not variables and classes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only instance variables can be marked transient and volatile (not methods or classes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instance variables can be marked four access levels, final, transient and volatile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instance variables cannot be marked abstract, synchronized, native and strictfp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Comparison of modifiers for variables and methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Local variables don’t get default values and should be initialized before use&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instance variables marked &lt;code&gt;final&lt;/code&gt; should be initialized in declaration itself or in the CONSTRUCTOR itself - (Compilation error)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;INTERFACE variables are always public static final. So cannot be reassigned&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to things that can be static and non-static&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explicit imports are resolved first, then the classes from the current package and last- the implicit imports&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for &lt;code&gt;java.lang.Runnable&lt;/code&gt; interface question, only one method available is public void run(){}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Interface Properties&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A variable declared in the interface cannot be changed at all&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A concrete implementation of an interface need not declare the throws clause of the abstract method, however cannot add any new ones only the subclasses or the class declared in the abstract method itself&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only INTERFACEs can extend more than one interface, but it CANNOT implement any class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Synchronized can be applied to static and final methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a class with protected method is created, the method can be accessed ONLY by the subclass &apos;this&apos; or subclass objects WITHIN the class (Super class objects give compilation error).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outside the subclass, the method cannot be accessed using objects&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chapter_3&quot;&gt;Chapter 3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Compound operators (+=) have an implicit cast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For divide by zero, integers will give ArithmethicException at runtime, while floating point numbers returns positive or negative infinity(same for using the reminder operator also)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Sysouts works from left to right. If the left and right operand is integer then the result is integer else if one of them is a string then the result is a string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watch out for increment/decrement operators on a FINAL variable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (right shift), the sign bit gets copied over. Hence the sign remains the same(-ve number remains negative). For &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; (left shift) the right side is ALWAYS FILLED with zeroes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; (UNSIGNED Right Shift) always fills the left side with zeroes irrespective of the sign bit.Hence this shift always gives a positive number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the shift number is greater than the bit length, then the reminder is used for shifting. Ex: &lt;code&gt;int x = 2; x &amp;gt;&amp;gt;= 34&lt;/code&gt;. This actually means &lt;code&gt;x &amp;gt;&amp;gt;= 2&lt;/code&gt; where &lt;code&gt;34%32 = 2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#Right Shift divides the number by &lt;code&gt;2^bits(Ex: x&quot;&gt;[Right Shift divides the number by &lt;code&gt;2^bits(Ex: x]&lt;/a&gt; 3 means x/2^3)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#Left Shift multiplies the number by &lt;code&gt;2^bits(Ex: x &amp;lt;&amp;lt; 3 means x * 2^3)&lt;/code&gt;&quot;&gt;[Left Shift multiplies the number by &lt;code&gt;2^bits(Ex: x &amp;lt;&amp;lt; 3 means x * 2^3)&lt;/code&gt;]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;&amp;lt;`&amp;amp; - Logical AND; | - Logical OR; ^ - Exclusive OR; ~ - Bitwise compliment`&amp;gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Values of the Truth table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SHORT CIRCUIT Operators work only with Boolean Expressions and NOT with numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, the logical AND and OR can work with both shadowing Primitives and Object references&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watch out for EXOR being mistaken for power of (Always use Math.power of)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always &lt;code&gt;&amp;amp;&lt;/code&gt; takes precedence over &lt;code&gt;|&lt;/code&gt; . So &lt;code&gt;&amp;amp;&lt;/code&gt; is evaluated first, in a boolean expression&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whenever any action happens on a String Object, a new String object is created as the result&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chapter_4&quot;&gt;Chapter 4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The else will always belong to the innermost if which doesn’t have an else&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The arguments to switch statement can only be byte,short,char and int&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The switch can check only for equality and the case arguments must be determined at runtime. So they have to be either literal constants or final variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If switch(byte variable) is used, then if the case value is greater than 127 then COMPILATION error occurs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In switch case, two case literals cannot have the same value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;default&lt;/code&gt; can be placed anywhere in switch case and it will also follow the rule of fall-through&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The scope of the variables declared in the for loop is within the for-loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a For Loop, Initialization is performed and CONDITION is checked before the first execution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iteration will run after every execution and then only comes out of the loop. However, if break, System,exit or return is given inside the for-loop the iteration is NOT executed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;continue&lt;/code&gt; should be within a loop while break should be within a loop or switch statement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A try clause Should always have either catch or finally block which should immediately follow the try clause without any statements in between&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the subclass is placed after the superclass in the exception catch, COMPILATION Error occcurs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any method &quot;ducking&quot; the exception should also declare the throws clause, except for RunTimeExceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error or subclass of Error are always unchecked. So it is not required to catch them&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For re-throwing the exceptions also(commonly from a catch block), we need to declare the exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assertion is always tested for true condition, if the condition returns false, AssertionError is thrown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ex: asssert (x&amp;lt; y) : &quot;Error statement &quot;+y&lt;/code&gt;. The First Expression should always result in a boolean while the second expression should always result in a value ( just like sysout)(Cannot be a call to a void method)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Legal and Ilegal assert Expressions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;assertions are disabled by default. So we can use assert as an identifier. But if we turn on assertions, then assert is a keyword - &lt;code&gt;Turn On: javac -source 1.4 test.ClassName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To Compile without assertions (default) &lt;code&gt;javac -source 1.3 test.ClassName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enabling assertions while executing : &lt;code&gt;java (-ea or -enableassertions) test.ClassName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disabling assertions while executing : &lt;code&gt;java (-da or -disableassertions) test.ClassName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The above enabling or disabling can be given without any class or package name for all classes or only at package or class level
&lt;code&gt;java -ea da:test.ClassName&lt;/code&gt; enables for all except test.ClassName (same for package as well)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Assertion Command Line switches&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AssertionError can be caught but it is not appropriate(non-recommended) AssertionError object is not accessible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assertion recommendations:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do not use assertions to validate arguments to a public method (needs to be checked mandatorily)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do use assertions to validate arguments to a private method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use assertions to validate command-line arguments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do use assertions, even in public methods, to check for cases that you know are never, ever supposed to happen (default of a switch Ex: default: &lt;code&gt;assert false;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use assert expressions that can cause side effects (method calls or value changing ones)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use assertions in private getters and setters&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a variable is marked FINAL, always check for any code that changes the value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The VM evaluates all assertion flags from left to right&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chapter_5&quot;&gt;Chapter 5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;getters - Accessors and setters - mutators&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the instance variables are public, watch for questions about whether the values will always be as those set in the settters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IS-A means extends (subclass). IS-A, extends, derived from, Inherited from, instance of, subtype of all means subclassing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HAS-A means having a reference variable of type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Animal a = new Horse();&lt;/code&gt; a can access methods which are ONLY overridden by the Horse Object and CANNOT access methods which are present only in the Horse Class. However, it can access all methods of Animal, though they are not present in the Horse&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Animal a = new Horse(); a.eat()&lt;/code&gt; will call the HORSE object eat as the object type is decided by virtual method invocation for OVERRIDING methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rules for Overriding:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Argument list and type, return type should match&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access levels can be less retrictive but CANNOT be more restrictive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There cannot be additional broader exceptions thrown, however it can be lesser or narrower (subclass can be thrown)&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overload can change the return type, however changing ONLY the return type is not a valid overload&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overload can change the argument list, return type, access modifier, can give broader and new exceptions, overloaded in the same or subclass&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The REFERENCE Type decides which overloaded method is being called.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Overriding - Instance Type (Runtime)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overloading - reference Type (Compile Time)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Overloaded and Overriden Method Invocations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Difference between Overloaded and Overriden methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watch out for methods with same as the class but with a return type. They are not constructors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a constructor with arguments is created, a no-arg constructor will NOT be created by default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Abstract classes can have Constructors and are always called when the subclass is instantiated. Interfaces DO NOT have constructors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A constructor can be called only by another constructor using super() or this(), it cannot be called by any other method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A default constructor has the same access modifier as the class, a super() call in the first line and is of no-arg type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the super class does not have a no-arg constructor, we HAVE to provide the super() call correctly (Compilation Error)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A constructor cannot be overriden but can be overloaded, but only within the same class as it is NOT inherited&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A constructor can have only a call to super() or this() and it should be there in the first line&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For return values, it can be a value which can be IMPLICITLY cast into the return type (short for an int return type) and a sub class type can be returned for a super class return type&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chapter_6&quot;&gt;Chapter 6&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Refer to String Object Creation count&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;String.charAt(index)&lt;/code&gt; is zero based&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrays has an ATTRIBUTE length while String has a method length()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;String.substring&lt;/code&gt; (the String word in the method is in lowercase) has (start,end). Start is zero-indexed and End is 1-indexed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StringBuffer are ideal for file I/O for handling large streams of data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StringBuffer methods are Synchronized&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;StringBuffer.insert(offset,String)&lt;/code&gt;. Offset is Zero-indexed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;abs&lt;/code&gt; method has all four numerical types as arguments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ceil&lt;/code&gt; and &lt;code&gt;floor&lt;/code&gt; takes only a double and returns a double&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;max&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; takes all four types of arguments but arg1 and arg2 should be of the same type. However for arguments, they are implicitly CAST. Eg: &lt;code&gt;Math.max(23.5, 3)&lt;/code&gt; or &lt;code&gt;Math.max(a,b)&lt;/code&gt; where a is int and b is float&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;random&lt;/code&gt; generates a number between 0.0 &amp;#8656; x &amp;lt; 1.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;round&lt;/code&gt; takes a float or double and returns a int or long&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sin,cos, tan and SQRT takes only double (radians) and returns a double&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;toDegree&lt;/code&gt; and &lt;code&gt;toRadian&lt;/code&gt; takes and returns a double&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Important static Math methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrapper classes Float and Double has POSITIVE_INFINITY and NEGATIVE_INFINITY&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Double.isNAN(x)&lt;/code&gt; is used for testing numbers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Math.sqrt(-16d)&lt;/code&gt; results in NaN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;divide by 0 for floating point number works while for integers gives ArithmeticException&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Wrapper Class Constructor Arguments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;valueOf&lt;/code&gt; is present for Integer, Long,Byte and Short and is used as &lt;code&gt;Integer.valueOf(&quot;1001101&quot;, 2) &amp;#8658; 43&lt;/code&gt;. i.e., takes two arguments String and radix and returns a WRAPPER class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;intValue&lt;/code&gt; and &lt;code&gt;parseInt&lt;/code&gt; returns a primitive number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refer to Wrapper Conversion Methods (Important)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The 3 types of toString usages are:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;obj.toString()&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Double.toString(3.3d)&lt;/code&gt; (All wrapper class has this except Boolean and Character)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Long.toString(254,16)&lt;/code&gt; &amp;#8658; fe (Integer and Long)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer and Long has these methods also.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Integer.toBinaryString(), toHexString() and toOctalString()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watch out for usage of StringBuffer methods like append(), reverse(0 on string Objects which leads to Compilation Error&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Continued in &lt;a href=&quot;scjp-notes-from-kathy-sierra-part2.html&quot;&gt;Part 2&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Criteria API in Hibernate</title>
      <link>http://sengopal.github.io/blog//blog/best-parts-of-criteria-api.html</link>
      <pubDate>Fri, 30 May 2008 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/best-parts-of-criteria-api.html</guid>
      	<description>
	&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_drawbacks_of_hql&quot;&gt;Drawbacks of HQL&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently HQL (Hibernate Query Language) is used widely to query data using Hibernate. However, there are many drawbacks such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;SQL-like syntax and Non Extensible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relational methodology instead of OO methodology&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Problem in creating search queries on the fly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complexity increases with number of variable conditions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error-prone String concatenation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct use of query parameters in the query string&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A sample usage for HQL Query:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;String query = &quot;select o from Order as o join o.products as p where o.priceTotal &amp;gt; :priceTotalLower and o.priceTotal &amp;lt; :priceTotalUpper&quot;;           
Query q = sess.createQuery(query);
q.setDouble(&quot;priceTotalLower&quot;, Double.parseDouble(lower));
q.setDouble(&quot;priceTotalUpper&quot;,Double.parseDouble(upper));
List list = q.list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In comparison to the Criteria API, the above query gets reduced to simple two lines with more comprehension and understanding of the functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;List list = sess.createCriteria(Order.class)
.add(Restrictions.between(lower,upper).list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the conciseness and readability, following are some of the best parts of using the Criteria API&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Aspects of the relational approach&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduces the complexity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-criteria search functionalities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building Hibernate Queries on the fly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knowledge of SQL not necessary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extensible&lt;/strong&gt; since it uses OO methodology&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interoperable&lt;/strong&gt; since it has provision for including native SQL clauses also&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rich set of comparison operators&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Business Objects as query parameters, without having to use primary and foreign key references&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optimizing queries by providing various JOIN Strategies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provides cleaner, clearer, more reliable and more maintainable code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_what_is_criteria_api&quot;&gt;What is Criteria API?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are five core components of the Criteria API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Criteria&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Criterion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restrictions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Order&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Criteria class provides the gateway to working with criteria APIs. Criterion class is the object-oriented representation of the relational criterion. Restriction API provides the built-in types for Criterion. Essentially, the Restriction class is a factory to the Criterion class. All of its methods are static.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Hibernate 2.x, the Expression class provided the services that are now provided by the Restriction class. The Restriction class provides almost all the required restrictions such as equals (eq()), logical and (and()), like (like())
Aggregation and Grouping are provided by the Projection class. Order class represents the &quot;order by&quot; clause of SQL.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_order_interface&quot;&gt;Order Interface&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In HQL (and SQL), the order by clause allows you to order your query results.
This is done using the addOrder() method and the Order class
The SQL will have the order clause in the sequence the Order objects were added to the Critieria.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Criteria crit = session.createCriteria(Sale.class) ;
crit.addOrder( Order.desc(&quot;date&quot;) );
crit.addOrder( Order.asc(&quot;product.number&quot;) );&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_simple_criteria_query&quot;&gt;Simple Criteria Query&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following code shows how a simple Criteria query is built.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It selects the Insurance Object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Includes a Where clause insurance name like ‘%a%’&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Includes another Where clause investmentAmount value between 1000 and 2500 inclusive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sets the number of maximum results as 5&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;session = sessionFactory.openSession();
Criteria crit = session.createCriteria(Insurance.class);
crit.add(Restrictions.like(&quot;insuranceName&quot;, &quot;%a%&quot;)); 
crit.add(Expression.between(&quot;investAmount&quot;, new Integer(1000),new Integer(2500))); 
crit.setMaxResults(5); 
List insurances = crit.list();
for(Iterator it =insurances.iterator();it.hasNext();){
	Insurance insurance = (Insurance) it.next();
  System.out.println(&quot;ID: &quot; + insurance.getLngInsuranceId());
  System.out.println(&quot;Name: &quot; + insurance.getInsuranceName());
  System.out.println(&quot;Amount: &quot; + insurance.getInvestAmount());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_criterion_chaining&quot;&gt;Criterion Chaining&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a popular method of adding Restrictions, Expressions, Projections and Order object without the need to create additional Objects. This is particularly useful when the Criteria Objects which are extensible are needed to be passed between methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;List sales = session.createCriteria(Sale.class)
    .add(Expression.ge(&quot;date&quot;,startDate)
    .add(Expression.le(&quot;date&quot;,endDate)
    .addOrder( Order.asc(&quot;date&quot;) )
    .setFirstResult(0)
    .setMaxResults(10)
    .list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_restriction_for_where_property&quot;&gt;Restriction for WHERE property&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The WHERE clause or &lt;em&gt;Restrictions&lt;/em&gt; can be easily applied via &lt;code&gt;Restriction.eqProperty()&lt;/code&gt;, &lt;code&gt;Restriction.neProperty()&lt;/code&gt;, &lt;code&gt;Restriction.leProperty()&lt;/code&gt; and &lt;code&gt;Restriction.geProperty()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// Adds a WHERE Clause for comparing two columns,
session.createCriteria(Sale.class)
    .eqProperty(&quot;saleDate&quot;,&quot;releaseDate&quot;)
    .list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Restriction still allows custom restrictions added using &lt;code&gt;Restrictions.sqlRestriction&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// Adds a native SQL Restriction in the WHERE Clause
sess.createCriteria(Cat.class)
.add(Restrictions.sqlRestriction(&quot;lower({alias}.name) like lower(?)&quot;, &quot;Fritz%&quot;,Hibernate.STRING) ) .list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;All the static methods available in Restrictions are also available in the Expression API. Also it contains some additional methods such as ilike(&quot;columnname&quot;) which does a lower(columnname) in the query.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_disjunction_and_conjunction&quot;&gt;Disjunction and Conjunction:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Disjunction and Conjunction are excellent APIs which help perform complex search criteria simple to develop and maintain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Disjunction&lt;/strong&gt; indicates a group of Criterion to be &lt;strong&gt;ORed&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Disjunction disList = Restrictions.disjunction();
disList.add(Restrictions.eq(&quot;id&quot;,new Integer(1));
disList.add(Restrictions.eq(&quot;id&quot;,new Integer(2));
sess.createCriteria(Cat.class) .add(disList);
// This gives the WHERE Clause WHERE (id=1 OR id=2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Conjunction&lt;/strong&gt; indicates a group of Critierion to be &lt;strong&gt;ANDed&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Conjunction conList = Restrictions.conjunction();
conList.add(Restrictions.eq(&quot;id&quot;,new Integer(1));
conList.add(Restrictions.eq(&quot;id&quot;,new Integer(2));
sess.createCriteria(Cat.class) .add(conList);
// This gives the WHERE Clause WHERE (id=1 AND id=2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;_The Disjunctions and Conjunctions can be nested as well and also along with group of Restrictions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Conjunction conList = Restrictions.conjunction();
conList.add(Restrictions.disjunction()
       .add(Restrictions.eq(&quot;id&quot;,new Integer(1))));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_how_to_join_tables_using_criteria_api&quot;&gt;How to join Tables using Criteria API&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using HQLs, joins resemble SQL closely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;// use LEFT JOIN FETCH for optimizing queries
from Sale sale where sale.date &amp;gt; :startDate left join fetch sale.product&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same can be achieved using Criteria API with the help of &lt;code&gt;setFetchMode()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;session.createCriteria(Sale.class)
      .setFetchMode(&quot;product&quot;,FetchMode.EAGER)
      .setFetchMode(&quot;category&quot;,FetchMode.EAGER)
      .list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using Criteria API, even &lt;strong&gt;Restriction&lt;/strong&gt; can be applied on the joined tables.Criteria API uses the createCriteria() or createAlias() (no new instance) to create an inner join between the two tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// to find all the shirt models with sizes over 40.
// HQL: from Shirt shirt join shirt.availableSizes size where size.number &amp;gt; 40

Session.createCriteria(Shirt.class)
      .createCriteria(&quot;availableSizes&quot;)
      .add(Expression.gt(&quot;number&quot;, new Integer(40)))
      .list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_projections_aggregation_and_grouping&quot;&gt;Projections - Aggregation and Grouping&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Projections API is used for aggregation and grouping functionality. A simple example which returns the count of number of cats with age greater than 10.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// Simple Projection
session.createCriteria(Cat.class)
      .add(Restrictions.gt(&quot;age&quot;, new Integer(10))
      .setProjection(Projections.rowCount())
      .list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A number of aggregations can be done in a single Criteria and can be done along with a group by clause.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Criteria crit = session.createCriteria(Cat.class)
ProjectionList projList = Projections.projectionList();
projList.add(Projections.rowCount() );
projList.add(Projections.avg(&quot;weight&quot;) ) ;
projList.add(Projections.max(&quot;weight&quot;) ) ;
projList.add(Projections.groupProperty(&quot;color&quot;) ) ) ;
List result = crit.setProjection(projList).list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To allow the users to query only the required columns Hibernate 3 introduced the &lt;strong&gt;Projections.property()&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Criteria crit = session.createCriteria(Employee.class);
crit.add(Restrictions.eq(&quot;zipCode&quot;, zipCode));
crit.add(Restrictions.gt(&quot;salary&quot;, new Integer(10000));
ProjectionList projList = Projections.projectionList();
projList.add(Projections.property(&quot;name&quot;));
projList.add(Projections.property(&quot;age&quot;));
projList.add(Projections.property(&quot;county&quot;));
projList.add(Projections.property(&quot;job&quot;));
crit.setProjection(projList);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;This really helps when the table being queried contains 50 to 60 columns and we need only 4 to 5 columns.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_query_by_example_api&quot;&gt;Query By Example API&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Example API helps to optimize the query by initializing the text values and by providing extensibility of the Criterion Object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// Initializing the text values to be used
Accommodation accommodationEx = new Accommodation();
accommodationEx.setCountry(country);
accommodationEx.setCapacity(capacity);

// Creating and fine tuning the example object
Example example = Example.create(accommodationEx)
    .ignoreCase() //Queries are case insensitive
    .excludeZeroes()  //zero-valued fields are ignored
    .excludeProperty(&quot;doNotUse&quot;) // this property is excluded
    .enableLike(MatchMode.ANYWHERE); //query string matching uses ‘%X%’

// Using the Example Object and adding further restrictions
List list = session.createCriteria(Accommodation.class)
    .add(example)
    .add(Expression.between(&quot;availabilityDate&quot;, startDate, endDate))
    .list();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel>
</rss>
